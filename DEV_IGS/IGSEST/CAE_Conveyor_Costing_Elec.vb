Option Strict Off
Option Explicit On 
Option Infer On

'$ Application: IGSEST
'$ PartFamily: CAE_Conveyor_Costing_Elec
'$ GenerateDate: 07/12/2025 13:20:28

    Imports Microsoft.VisualBasic
    Imports System
    Imports System.IO
    Imports System.Data
    Imports System.Windows.Forms
    Imports System.Collections
    Imports System.Diagnostics
    Imports System.Math
    Imports System.Xml
    Imports System.Xml.Linq
    Imports RuleStream
    Imports RuleStream.Kernel
    Imports System.Collections.Generic
    Imports RulestreamTCUtilities
    Imports IGSEST.swMateType_e
    Imports IGSEST.swMateAlign_e
    Imports IGSEST.severity

    Public Class [CAE_Conveyor_Costing_Elec]
    
    Inherits RuleStream.Kernel.Part
    Implements RuleStream.IRsPartFormulas

    '*************************************************************************
    '*                                                                       *
    '*   This source code, together with any object or execution files       *
    '*   generated herefrom (whether by compiling, translating, or linking   *
    '*   this source file to any header files, resource files, library       *
    '*   files, other source files or object files) are confidential and     *
    '*   proprietary to Siemens Product Lifecycle Management Software Inc.   *
    '*   No person may sell, offer for sale, copy, use, compile, translate   *
    '*   or link this source                                                 *
    '*   file without the written prior approval of Siemens Product          *
    '*   Lifecycle Management Software Inc.                                  *
    '*                                                                       *
    '*   Copyright (C) 2024 Siemens. All rights reserved.                    *
    '*                                                                       *
    '*************************************************************************

    Private this as CAE_Conveyor_Costing_Elec = me

    #Region " IRsPartFormulas Implementation "

    Public Function GetNormalValue(ByVal Value as Object, ByVal propertyName As String, ByVal context As String) As Double Implements RuleStream.IRsPartFormulas.GetNormalValue
    Dim MethodName as String = string.format("Formula_{0}_NORMALVALUE{1}", propertyName, context)
    Return CallByName(Me, MethodName, CallType.Method, Value)
    End Function

    Public Function GetOptimalPartFamily(ByVal subpartSpecName As String, ByVal context As String) As String Implements RuleStream.IRsPartFormulas.GetOptimalPartFamily
    Dim MethodName as String = string.format("Formula_{0}_OPTIMALPARTFAMILY{1}", subpartSpecName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Function GetPartNames(ByVal subpartSpecName As String, ByVal context As String) As Object Implements RuleStream.IRsPartFormulas.GetPartNames
    Dim MethodName as String = string.format("Formula_{0}_PARTNAMES{1}", subpartSpecName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Function GetParts(ByVal specName As String, ByVal context As String) As Object Implements RuleStream.IRsPartFormulas.GetParts
    Dim MethodName as String = string.format("Formula_{0}_PARTS{1}", specName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Function GetProcessStepComment(ByVal processId As String, ByVal processStep As String) As String Implements RuleStream.IRsPartFormulas.GetProcessStepComment
    Dim Result as String = ""
    
    Return Result
    End Function

    Public Function GetProcessStepStatus(ByVal processId As String, ByVal processStep As String) As Integer Implements RuleStream.IRsPartFormulas.GetProcessStepStatus
    Dim Result as Integer 'Long
    
    Return Result
    End Function

    Public Function GetQuantity(ByVal subpartSpecName As String, ByVal context As String) As Integer Implements RuleStream.IRsPartFormulas.GetQuantity
    Dim MethodName as String = string.format("Formula_{0}_QUANTITY{1}",subpartSpecName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Function GetResult(ByVal propertyName As String, ByVal context As String) As Object Implements RuleStream.IRsPartFormulas.GetResult
    Dim MethodName as String = string.format("Formula_{0}{1}",propertyName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Function GetResultCustomCheckDependancy(ByVal propertyName As String, ByVal context As String) As Boolean Implements RuleStream.IRsPartFormulas.GetResultCustomCheckDependancy
    Dim MethodName as String = string.format("Formula_{0}{1}",propertyName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Function GetUserChange(ByVal specName As String, ByVal context As String) As Boolean Implements RuleStream.IRsPartFormulas.GetUserChange
    Dim MethodName as String = string.format("Formula_{0}_USERCHANGE{1}", specName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Function GetHideCalculatedValue(ByVal propertyName As String, ByVal context As String) As Boolean Implements RuleStream.IRsPartFormulas.GetHideCalculatedValue
    Dim MethodName as String = string.format("Formula_{0}_HIDE_CALCULATED_VALUE{1}",propertyName, context)
    Return CallByName(Me, MethodName, CallType.Method)
    End Function

    Public Sub NewContextInit() Implements RuleStream.IRsPartFormulas.NewContextInit
    NewContextInit_Properties()
    NewContextInit_ValidValues()
    NewContextInit_Subparts()
    NewContextInit_Connections()
    NewContextInit_DB()
    End Sub

    Public Sub OnChanged(ByVal specName As String, ByVal context As String) Implements RuleStream.IRsPartFormulas.OnChanged
    'Dim MethodName as String = string.format("Formula_{0}_WHENCHANGED{1}", specName, context)
    'CallByName(Me, MethodName, CallType.Method)
    Select Case specName & "_" & context
    End Select
    Select Case specName & "_" & context
    
    End Select
    End Sub

    Public Sub OnChanged(ByRef Value as Object, ByVal OldValue as Object, ByVal specName As String, ByVal context As String) Implements RuleStream.IRsPartFormulas.OnChanged
    'Dim MethodName as String = string.format("Formula_{0}_WHENCHANGED{1}", specName, context)
    'CallByName(Me, MethodName, CallType.Method, Value)
    Select Case specName & "_" & context
    
    End Select
    End Sub

    Public Function OnChangedStatus(ByRef Value as Object, ByVal OldValue as Object, ByVal specName As String, ByVal context As String)As Boolean Implements RuleStream.IRsPartFormulas.OnChangedStatus
    'Dim MethodName as String = string.format("Formula_{0}_WHENCHANGED{1}", specName, context)
    'CallByName(Me, MethodName, CallType.Method, Value)
    Dim Status as Boolean = False
    Select Case specName & "_" & context
    Case Else
    Status = False
    End Select
    Return Status
    End Function

    #End Region

    #Region " Properties, Subparts, Connections "
    
          Public Property [Elec_Install_ConvElev_Footage_Conveyor_above_8Feet]() As Double
      Get
      Return Properties("Elec_Install_ConvElev_Footage_Conveyor_above_8Feet").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_ConvElev_Footage_Conveyor_above_8Feet").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet]() As Double
      Get
      Return Properties("Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_ConvElev_Footage_Hours_Added]() As Double
      Get
      Return Properties("Elec_Install_ConvElev_Footage_Hours_Added").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_ConvElev_Footage_Hours_Added").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Average_Crew_Size]() As Double
      Get
      Return Properties("Elec_Install_Crew_Average_Crew_Size").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Average_Crew_Size").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Average_Hrs_per_Wk]() As Double
      Get
      Return Properties("Elec_Install_Crew_Average_Hrs_per_Wk").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Average_Hrs_per_Wk").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk]() As Double
      Get
      Return Properties("Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Head_Count_Installer]() As Double
      Get
      Return Properties("Elec_Install_Crew_Head_Count_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Head_Count_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Head_Count_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_Crew_Head_Count_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Head_Count_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Head_CountSuperintendent]() As Double
      Get
      Return Properties("Elec_Install_Crew_Head_CountSuperintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Head_CountSuperintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Mobile_Cost_Installer]() As Double
      Get
      Return Properties("Elec_Install_Crew_Mobile_Cost_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Mobile_Cost_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Mobile_Cost_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_Crew_Mobile_Cost_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Mobile_Cost_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Mobile_Cost_Superintendent]() As Double
      Get
      Return Properties("Elec_Install_Crew_Mobile_Cost_Superintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Mobile_Cost_Superintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Mobile_Count_Installer]() As Double
      Get
      Return Properties("Elec_Install_Crew_Mobile_Count_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Mobile_Count_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Mobile_Count_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_Crew_Mobile_Count_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Mobile_Count_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Mobile_CountSuperintendent]() As Double
      Get
      Return Properties("Elec_Install_Crew_Mobile_CountSuperintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Mobile_CountSuperintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_install_Crew_Mobilization_CostPerPerson]() As Double
      Get
      Return Properties("Elec_install_Crew_Mobilization_CostPerPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_install_Crew_Mobilization_CostPerPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Peak_Crew]() As Double
      Get
      Return Properties("Elec_Install_Crew_Peak_Crew").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Peak_Crew").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Peak_CrewMultiplierInstall]() As Double
      Get
      Return Properties("Elec_Install_Crew_Peak_CrewMultiplierInstall").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Peak_CrewMultiplierInstall").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Total_Head_Count]() As Double
      Get
      Return Properties("Elec_Install_Crew_Total_Head_Count").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Total_Head_Count").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Crew_Total_Mobile_Cost]() As Double
      Get
      Return Properties("Elec_Install_Crew_Total_Mobile_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Crew_Total_Mobile_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Qnty_Fork_Truck]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Qnty_Fork_Truck").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Qnty_Fork_Truck").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Qnty_LargeBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Qnty_LargeBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Qnty_LargeBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Qnty_LargeScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Qnty_LargeScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Qnty_LargeScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Qnty_SmallBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Qnty_SmallBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Qnty_SmallBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Qnty_SmallScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Qnty_SmallScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Qnty_SmallScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Qnty_SmallTeleHandle]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Qnty_SmallTeleHandle").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Qnty_SmallTeleHandle").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_TotalCost_Fork_Truck]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_TotalCost_Fork_Truck").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_TotalCost_Fork_Truck").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_TotalCost_LargeBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_TotalCost_LargeBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_TotalCost_LargeBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_TotalCost_LargeScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_TotalCost_LargeScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_TotalCost_LargeScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_TotalCost_SmallBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_TotalCost_SmallBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_TotalCost_SmallBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_TotalCost_SmallScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_TotalCost_SmallScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_TotalCost_SmallScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_TotalCost_SmallTeleHandle]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_TotalCost_SmallTeleHandle").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_TotalCost_SmallTeleHandle").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Weeks_Fork_Truck]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Weeks_Fork_Truck").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Weeks_Fork_Truck").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Weeks_LargeBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Weeks_LargeBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Weeks_LargeBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Weeks_LargeScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Weeks_LargeScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Weeks_LargeScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Weeks_SmallBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Weeks_SmallBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Weeks_SmallBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Weeks_SmallScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Weeks_SmallScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Weeks_SmallScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_Weeks_SmallTeleHandle]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_Weeks_SmallTeleHandle").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_Weeks_SmallTeleHandle").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_WklyRate_Fork_Truck]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_WklyRate_Fork_Truck").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_WklyRate_Fork_Truck").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_WklyRate_LargeBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_WklyRate_LargeBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_WklyRate_LargeBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_WklyRate_LargeScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_WklyRate_LargeScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_WklyRate_LargeScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_WklyRate_SmallBoomLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_WklyRate_SmallBoomLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_WklyRate_SmallBoomLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_WklyRate_SmallScissorsLift]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_WklyRate_SmallScissorsLift").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_WklyRate_SmallScissorsLift").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_EquipRent_WklyRate_SmallTeleHandle]() As Double
      Get
      Return Properties("Elec_Install_EquipRent_WklyRate_SmallTeleHandle").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_EquipRent_WklyRate_SmallTeleHandle").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Factors_Customer_SpecDifficulty]() As Double
      Get
      Return Properties("Elec_Install_Factors_Customer_SpecDifficulty").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Factors_Customer_SpecDifficulty").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Factors_Material_Escalation]() As Double
      Get
      Return Properties("Elec_Install_Factors_Material_Escalation").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Factors_Material_Escalation").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Factors_Risk_Rating]() As Double
      Get
      Return Properties("Elec_Install_Factors_Risk_Rating").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Factors_Risk_Rating").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_HSE_Cost_Per_Diem_Rate_Count]() As Double
      Get
      Return Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Count").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Count").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_HSE_Cost_Per_Diem_Rate_Price]() As Double
      Get
      Return Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Price").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Price").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot]() As Double
      Get
      Return Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_HSE_Cost_Total]() As Double
      Get
      Return Properties("Elec_Install_HSE_Cost_Total").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_HSE_Cost_Total").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_HSE_Cost_Wages_Count]() As Double
      Get
      Return Properties("Elec_Install_HSE_Cost_Wages_Count").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_HSE_Cost_Wages_Count").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_HSE_Cost_Wages_Price]() As Double
      Get
      Return Properties("Elec_Install_HSE_Cost_Wages_Price").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_HSE_Cost_Wages_Price").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_HSE_Cost_Wages_Price_Total]() As Double
      Get
      Return Properties("Elec_Install_HSE_Cost_Wages_Price_Total").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_HSE_Cost_Wages_Price_Total").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Current_Rate_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Current_Rate_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Current_Rate_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Current_Rate_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Current_Rate_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Current_Rate_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Current_Rate_Superintendent]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Current_Rate_Superintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Current_Rate_Superintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_New_Rate_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_New_Rate_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_New_Rate_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_New_Rate_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_New_Rate_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_New_Rate_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_New_Rate_Superintendent]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_New_Rate_Superintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_New_Rate_Superintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Percent_Adjust_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Percent_Adjust_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Percent_Adjust_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Percent_Adjust_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Percent_Adjust_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Percent_Adjust_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Percent_Adjust_SI]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Percent_Adjust_SI").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Percent_Adjust_SI").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Percent_Adjustment]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Percent_Adjustment").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Percent_Adjustment").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Tot_Cost_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Tot_Cost_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Tot_Cost_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Tot_Cost_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Tot_Cost_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Tot_Cost_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Tot_Cost_Superintendent]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Tot_Cost_Superintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Tot_Cost_Superintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_LaborRate_Total_Cost_Adjustment]() As Double
      Get
      Return Properties("Elec_Install_LaborRate_Total_Cost_Adjustment").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_LaborRate_Total_Cost_Adjustment").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MAT_DeviceMatCost_Conduit_Wireway]() As Double
      Get
      Return Properties("Elec_Install_MAT_DeviceMatCost_Conduit_Wireway").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MAT_DeviceMatCost_Conduit_Wireway").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MAT_DeviceMatCost_Total]() As Double
      Get
      Return Properties("Elec_Install_MAT_DeviceMatCost_Total").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MAT_DeviceMatCost_Total").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MAT_DeviceMatCost_Wire]() As Double
      Get
      Return Properties("Elec_Install_MAT_DeviceMatCost_Wire").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MAT_DeviceMatCost_Wire").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway]() As Double
      Get
      Return Properties("Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MAT_PowerFeedMatCost_Total]() As Double
      Get
      Return Properties("Elec_Install_MAT_PowerFeedMatCost_Total").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MAT_PowerFeedMatCost_Total").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MAT_PowerFeedMatCost_Wire]() As Double
      Get
      Return Properties("Elec_Install_MAT_PowerFeedMatCost_Wire").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MAT_PowerFeedMatCost_Wire").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Commissioning_Total_Cost]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Commissioning_Total_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Commissioning_Total_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Commissioning_Total_Hours]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Commissioning_Total_Hours").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Commissioning_Total_Hours").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Conduit_Cost_Foot]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Conduit_Cost_Foot").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Conduit_Cost_Foot").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Devices_Crew]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Devices_Crew").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Devices_Crew").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Devices_Foot]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Devices_Foot").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Devices_Foot").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_IGS_Support_Cost]() As Double
      Get
      Return Properties("Elec_Install_Metrics_IGS_Support_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_IGS_Support_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Install_Hours_Device]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Install_Hours_Device").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Install_Hours_Device").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Materials_Cost_Device]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Materials_Cost_Device").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Materials_Cost_Device").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Percent_Footage_at_Elevation]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Percent_Footage_at_Elevation").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Percent_Footage_at_Elevation").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Rental_Cost_Week]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Rental_Cost_Week").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Rental_Cost_Week").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Rigid_Conduit]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Rigid_Conduit").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Rigid_Conduit").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Total_Conduit_Footage]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Total_Conduit_Footage").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Total_Conduit_Footage").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Total_Cost_Device]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Total_Cost_Device").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Total_Cost_Device").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Total_Devices]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Total_Devices").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Total_Devices").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Total_Footage]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Total_Footage").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Total_Footage").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Total_Hours_Device]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Total_Hours_Device").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Total_Hours_Device").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Total_Stagnant_Hours]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Total_Stagnant_Hours").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Total_Stagnant_Hours").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Total_Wire_Footage]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Total_Wire_Footage").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Total_Wire_Footage").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Travel_Expense_Resource]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Travel_Expense_Resource").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Travel_Expense_Resource").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Metrics_Wire_Cost_Foot]() As Double
      Get
      Return Properties("Elec_Install_Metrics_Wire_Cost_Foot").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Metrics_Wire_Cost_Foot").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_Customer_Spec_Adder]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_Customer_Spec_Adder").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_Customer_Spec_Adder").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_Elevation_Adder]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_Elevation_Adder").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_Elevation_Adder").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_Layout_Inventory]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_Layout_Inventory").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_Layout_Inventory").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_Misc_Item_1]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_Misc_Item_1").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_Misc_Item_1").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_Misc_Item_2]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_Misc_Item_2").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_Misc_Item_2").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_Shuttle]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_Shuttle").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_Shuttle").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_System_Efficiency]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_System_Efficiency").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_System_Efficiency").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Hours_Total]() As Double
      Get
      Return Properties("Elec_Install_MISC_Hours_Total").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Hours_Total").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_Customer_SpecAdder]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_Customer_SpecAdder").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_Customer_SpecAdder").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_Elevation_Adder]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_Elevation_Adder").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_Elevation_Adder").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_Layout_Inventory]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_Layout_Inventory").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_Layout_Inventory").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_Misc_Item_1]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_Misc_Item_1").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_Misc_Item_1").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_Misc_Item_2]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_Misc_Item_2").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_Misc_Item_2").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_Shuttle]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_Shuttle").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_Shuttle").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_System_Efficiency]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_System_Efficiency").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_System_Efficiency").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Percent_Total]() As Double
      Get
      Return Properties("Elec_Install_MISC_Percent_Total").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Percent_Total").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_Customer_Spec_Adder]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_Customer_Spec_Adder").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_Customer_Spec_Adder").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_Elevation_Adder]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_Elevation_Adder").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_Elevation_Adder").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_Layout_Inventory]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_Layout_Inventory").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_Layout_Inventory").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_Misc_Item_1]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_Misc_Item_1").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_Misc_Item_1").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_Misc_Item_2]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_Misc_Item_2").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_Misc_Item_2").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_Shuttle]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_Shuttle").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_Shuttle").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_System_Efficiency]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_System_Efficiency").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_System_Efficiency").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_MISC_Price_Total]() As Double
      Get
      Return Properties("Elec_Install_MISC_Price_Total").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_MISC_Price_Total").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_OtherCost_Duration_Wks]() As Double
      Get
      Return Properties("Elec_Install_OtherCost_Duration_Wks").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_OtherCost_Duration_Wks").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_OtherCost_Hrs_Per_Week]() As Double
      Get
      Return Properties("Elec_Install_OtherCost_Hrs_Per_Week").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_OtherCost_Hrs_Per_Week").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_OtherCost_Onsite_Admin]() As Double
      Get
      Return Properties("Elec_Install_OtherCost_Onsite_Admin").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_OtherCost_Onsite_Admin").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_OtherCost_Permit_Hours]() As Double
      Get
      Return Properties("Elec_Install_OtherCost_Permit_Hours").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_OtherCost_Permit_Hours").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_OtherCost_Qty_Gang_Boxes]() As Double
      Get
      Return Properties("Elec_Install_OtherCost_Qty_Gang_Boxes").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_OtherCost_Qty_Gang_Boxes").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_OtherCost_Qty_Trucks]() As Double
      Get
      Return Properties("Elec_Install_OtherCost_Qty_Trucks").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_OtherCost_Qty_Trucks").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Comm_Installers]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Comm_Installers").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Comm_Installers").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Comm_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Comm_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Comm_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Comm_Superintndnt]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Comm_Superintndnt").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Comm_Superintndnt").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Install_Installers]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Install_Installers").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Install_Installers").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Install_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Install_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Install_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Install_Superintndnt]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Install_Superintndnt").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Install_Superintndnt").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Working_Installers]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Working_Installers").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Working_Installers").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Working_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Working_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Working_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_PeopleNeed_Working_Superintndnt]() As Double
      Get
      Return Properties("Elec_Install_PeopleNeed_Working_Superintndnt").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_PeopleNeed_Working_Superintndnt").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Project_Info_Customer]() As Double
      Get
      Return Properties("Elec_Install_Project_Info_Customer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Project_Info_Customer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Project_Info_Description]() As Double
      Get
      Return Properties("Elec_Install_Project_Info_Description").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Project_Info_Description").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Project_Info_Location]() As Double
      Get
      Return Properties("Elec_Install_Project_Info_Location").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Project_Info_Location").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Project_Info_Number]() As Double
      Get
      Return Properties("Elec_Install_Project_Info_Number").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Project_Info_Number").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Project_Info_Quote_Date]() As Double
      Get
      Return Properties("Elec_Install_Project_Info_Quote_Date").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Project_Info_Quote_Date").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Project_Tier]() As Double
      Get
      Return Properties("Elec_Install_Project_Tier").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Project_Tier").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Schedule_Commissioning]() As Double
      Get
      Return Properties("Elec_Install_Schedule_Commissioning").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Schedule_Commissioning").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Schedule_End_Commission_Testing]() As Double
      Get
      Return Properties("Elec_Install_Schedule_End_Commission_Testing").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Schedule_End_Commission_Testing").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Schedule_End_Elec_Install]() As Double
      Get
      Return Properties("Elec_Install_Schedule_End_Elec_Install").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Schedule_End_Elec_Install").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Schedule_Install]() As Double
      Get
      Return Properties("Elec_Install_Schedule_Install").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Schedule_Install").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Schedule_Start_Elec_Install]() As Double
      Get
      Return Properties("Elec_Install_Schedule_Start_Elec_Install").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Schedule_Start_Elec_Install").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_Schedule_Weeks]() As Double
      Get
      Return Properties("Elec_Install_Schedule_Weeks").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_Schedule_Weeks").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_AddSubContractService_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_AddSubContractService_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_AddSubContractService_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Administrative_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Administrative_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Administrative_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Device_MAT_Conduit_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Device_MAT_Conduit_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Device_MAT_Conduit_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Device_Materials_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Device_Materials_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Device_Materials_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Device_Materials_Wire_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Device_Materials_Wire_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Device_Materials_Wire_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_ECI_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_ECI_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_ECI_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_ECI_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_ECI_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_ECI_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Equipment_Rental_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Equipment_Rental_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Equipment_Rental_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_ComisonCost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_ComisonCost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_ComisonCost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_ComisonHour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_ComisonHour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_ComisonHour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Demo_Panel_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Demo_Panel_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Install_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Install_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Install_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Install_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Install_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Install_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_MiscInstall_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_MiscInstall_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_PF_Labor_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_PF_Labor_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Rate]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Rate").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Rate").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_SH_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_SH_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_SH_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_SH_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_SH_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_SH_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Working_SLD_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Installer_Working_SLD_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_ComisonCost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_ComisonCost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_ComisonCost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_ComisonHour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_ComisonHour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_ComisonHour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_InstallCost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_InstallCost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_InstallCost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_InstallHour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_InstallHour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_InstallHour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_Rate]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_Rate").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_Rate").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_SH_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_SH_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_SH_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Lead_Person_SH_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Lead_Person_SH_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Lead_Person_SH_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Miscellaneous_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Miscellaneous_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Miscellaneous_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Permits_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Permits_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Permits_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_PF_Materials_Conduit_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_PF_Materials_Conduit_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_PF_Materials_Conduit_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_PF_Materials_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_PF_Materials_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_PF_Materials_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_PF_Materials_Wire_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_PF_Materials_Wire_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_PF_Materials_Wire_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_ComisonCost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_ComisonCost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_ComisonCost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_ComisonHour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_ComisonHour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_ComisonHour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_InstallCost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_InstallCost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_InstallCost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_InstallHour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_InstallHour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_InstallHour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_Rate]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_Rate").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_Rate").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_SH_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_SH_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_SH_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Superintendent_SH_Hour]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Superintendent_SH_Hour").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Superintendent_SH_Hour").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Travel_Expense_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Travel_Expense_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Travel_Expense_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TotalCosts_Travel_Expense_PerDiemCost]() As Double
      Get
      Return Properties("Elec_Install_TotalCosts_Travel_Expense_PerDiemCost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TotalCosts_Travel_Expense_PerDiemCost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_PerDiem_Installer]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_PerDiem_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_PerDiem_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_PerDiem_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_PerDiem_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_PerDiem_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_PerDiemSuperintendent]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_PerDiemSuperintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_PerDiemSuperintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_Total_Mob_Cost]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_Total_Mob_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_Total_Mob_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_Total_Per_Diem]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_Total_Per_Diem").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_Total_Per_Diem").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_Total_Travel_Cost]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_Total_Travel_Cost").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_Total_Travel_Cost").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalDiem_Installer]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalDiem_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalDiem_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalDiem_SI]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalDiem_SI").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalDiem_SI").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalMob_Installer]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalMob_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalMob_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalMob_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalMob_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalMob_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalMob_SI]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalMob_SI").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalMob_SI").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalTravel_Installer]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalTravel_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalTravel_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Crew_TotalTravel_SI]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Crew_TotalTravel_SI").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Crew_TotalTravel_SI").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Per_Diem_Range]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Per_Diem_Range").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Per_Diem_Range").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_TravelCost_Per_Diem_Range_Link]() As Double
      Get
      Return Properties("Elec_Install_TravelCost_Per_Diem_Range_Link").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_TravelCost_Per_Diem_Range_Link").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Current_Rate_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Current_Rate_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Current_Rate_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Current_Rate_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Current_Rate_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Current_Rate_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Current_Rate_Superintendent]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Current_Rate_Superintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Current_Rate_Superintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_New_Rate_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_New_Rate_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_New_Rate_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_New_Rate_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_New_Rate_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_New_Rate_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_New_Rate_Superintendent]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_New_Rate_Superintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_New_Rate_Superintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Percent_Adjust_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Percent_Adjust_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Percent_Adjust_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Percent_Adjust_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Percent_Adjust_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Percent_Adjust_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Percent_Adjust_SI]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Percent_Adjust_SI").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Percent_Adjust_SI").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Percent_Adjustment]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Percent_Adjustment").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Percent_Adjustment").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Tot_Cost_IG_Installer]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Tot_Cost_IG_Installer").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Tot_Cost_IG_Installer").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Tot_Cost_LeadPerson]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Tot_Cost_LeadPerson").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Tot_Cost_LeadPerson").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Tot_Cost_Superintendent]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Tot_Cost_Superintendent").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Tot_Cost_Superintendent").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [Elec_Install_UnionRate_Total_Cost_Adjustment]() As Double
      Get
      Return Properties("Elec_Install_UnionRate_Total_Cost_Adjustment").Value
      End Get
      Set(ByVal Value As Double)
      Properties("Elec_Install_UnionRate_Total_Cost_Adjustment").CalculatedValue = Value
      End Set
      End Property
    
          Public Property [PartNumber]() As String
      Get
      Return Properties("PartNumber").Value
      End Get
      Set(ByVal Value As String)
      Properties("PartNumber").CalculatedValue = Value
      End Set
      End Property
    
    #End Region

    #Region " Initialization "
    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Public Sub Initialize() Implements RuleStream.IRsPartFormulas.Initialize
    Dim oSpec As Rulestream.Kernel.Spec = Nothing
    Dim oConnection as Rulestream.Kernel.Connection = Nothing
    Dim oSubpart as Rulestream.Kernel.Subpart = Nothing
    dim oMasterDoc as Rulestream.Kernel.MasterDoc = Nothing
    InitPart("CAE_Conveyor_Costing_Elec", <a><![CDATA[CAE_Conveyor_Costing_Elec]]></a>.Value, 394, "IGSEST",  "N", "N", False, False, "In Development", "", "", "", "", "",  "GLOBAL\H581955", "07/03/2025 17:05:46")
    AddProperty("8297", "Elec_Install_ConvElev_Footage_Conveyor_above_8Feet", <a><![CDATA[Elec_Install_ConvElev_Footage_Conveyor_above_8Feet]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q25", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:01 PM")
    AddProperty("8296", "Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet", <a><![CDATA[Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q24", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:59 PM")
    AddProperty("8298", "Elec_Install_ConvElev_Footage_Hours_Added", <a><![CDATA[Elec_Install_ConvElev_Footage_Hours_Added]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q26", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:03 PM")
    AddProperty("8213", "Elec_Install_Crew_Average_Crew_Size", <a><![CDATA[Elec_Install_Crew_Average_Crew_Size]]></a>.Value, "Elec Install ^'Conveyor Costing'!K29", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:05 PM")
    AddProperty("8209", "Elec_Install_Crew_Average_Hrs_per_Wk", <a><![CDATA[Elec_Install_Crew_Average_Hrs_per_Wk]]></a>.Value, "Elec Install ^'Conveyor Costing'!I26", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:57 PM")
    AddProperty("8210", "Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk", <a><![CDATA[Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk]]></a>.Value, "Elec Install ^'Conveyor Costing'!I27", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:59 PM")
    AddProperty("8229", "Elec_Install_Crew_Head_Count_Installer", <a><![CDATA[Elec_Install_Crew_Head_Count_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!J41", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:37 PM")
    AddProperty("8228", "Elec_Install_Crew_Head_Count_Lead_Man", <a><![CDATA[Elec_Install_Crew_Head_Count_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!J40", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:35 PM")
    AddProperty("8227", "Elec_Install_Crew_Head_CountSuperintendent", <a><![CDATA[Elec_Install_Crew_Head_CountSuperintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!J39", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:33 PM")
    AddProperty("8233", "Elec_Install_Crew_Mobile_Cost_Installer", <a><![CDATA[Elec_Install_Crew_Mobile_Cost_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!K41", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:45 PM")
    AddProperty("8232", "Elec_Install_Crew_Mobile_Cost_Lead_Man", <a><![CDATA[Elec_Install_Crew_Mobile_Cost_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!K40", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:43 PM")
    AddProperty("8231", "Elec_Install_Crew_Mobile_Cost_Superintendent", <a><![CDATA[Elec_Install_Crew_Mobile_Cost_Superintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!K39", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:41 PM")
    AddProperty("8226", "Elec_Install_Crew_Mobile_Count_Installer", <a><![CDATA[Elec_Install_Crew_Mobile_Count_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!I41", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:31 PM")
    AddProperty("8225", "Elec_Install_Crew_Mobile_Count_Lead_Man", <a><![CDATA[Elec_Install_Crew_Mobile_Count_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!I40", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:29 PM")
    AddProperty("8224", "Elec_Install_Crew_Mobile_CountSuperintendent", <a><![CDATA[Elec_Install_Crew_Mobile_CountSuperintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!I39", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:27 PM")
    AddProperty("8223", "Elec_install_Crew_Mobilization_CostPerPerson", <a><![CDATA[Elec_install_Crew_Mobilization_CostPerPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!I37", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:25 PM")
    AddProperty("8212", "Elec_Install_Crew_Peak_Crew", <a><![CDATA[Elec_Install_Crew_Peak_Crew]]></a>.Value, "Elec Install ^'Conveyor Costing'!K27", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:03 PM")
    AddProperty("8211", "Elec_Install_Crew_Peak_CrewMultiplierInstall", <a><![CDATA[Elec_Install_Crew_Peak_CrewMultiplierInstall]]></a>.Value, "Elec Install ^'Conveyor Costing'!I28", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:01 PM")
    AddProperty("8230", "Elec_Install_Crew_Total_Head_Count", <a><![CDATA[Elec_Install_Crew_Total_Head_Count]]></a>.Value, "Elec Install ^'Conveyor Costing'!J42", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:39 PM")
    AddProperty("8234", "Elec_Install_Crew_Total_Mobile_Cost", <a><![CDATA[Elec_Install_Crew_Total_Mobile_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!K42", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:54 PM")
    AddProperty("8271", "Elec_Install_EquipRent_Qnty_Fork_Truck", <a><![CDATA[Elec_Install_EquipRent_Qnty_Fork_Truck]]></a>.Value, "Elec Install ^'Conveyor Costing'!N14", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:09 PM")
    AddProperty("8269", "Elec_Install_EquipRent_Qnty_LargeBoomLift", <a><![CDATA[Elec_Install_EquipRent_Qnty_LargeBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!N12", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:05 PM")
    AddProperty("8267", "Elec_Install_EquipRent_Qnty_LargeScissorsLift", <a><![CDATA[Elec_Install_EquipRent_Qnty_LargeScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!N10", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:01 PM")
    AddProperty("8268", "Elec_Install_EquipRent_Qnty_SmallBoomLift", <a><![CDATA[Elec_Install_EquipRent_Qnty_SmallBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!N11", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:03 PM")
    AddProperty("8266", "Elec_Install_EquipRent_Qnty_SmallScissorsLift", <a><![CDATA[Elec_Install_EquipRent_Qnty_SmallScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!N9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:59 PM")
    AddProperty("8270", "Elec_Install_EquipRent_Qnty_SmallTeleHandle", <a><![CDATA[Elec_Install_EquipRent_Qnty_SmallTeleHandle]]></a>.Value, "Elec Install ^'Conveyor Costing'!N13", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:07 PM")
    AddProperty("8289", "Elec_Install_EquipRent_TotalCost_Fork_Truck", <a><![CDATA[Elec_Install_EquipRent_TotalCost_Fork_Truck]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q14", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:45 PM")
    AddProperty("8287", "Elec_Install_EquipRent_TotalCost_LargeBoomLift", <a><![CDATA[Elec_Install_EquipRent_TotalCost_LargeBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q12", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:41 PM")
    AddProperty("8285", "Elec_Install_EquipRent_TotalCost_LargeScissorsLift", <a><![CDATA[Elec_Install_EquipRent_TotalCost_LargeScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q10", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:37 PM")
    AddProperty("8286", "Elec_Install_EquipRent_TotalCost_SmallBoomLift", <a><![CDATA[Elec_Install_EquipRent_TotalCost_SmallBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q11", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:39 PM")
    AddProperty("8284", "Elec_Install_EquipRent_TotalCost_SmallScissorsLift", <a><![CDATA[Elec_Install_EquipRent_TotalCost_SmallScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:35 PM")
    AddProperty("8288", "Elec_Install_EquipRent_TotalCost_SmallTeleHandle", <a><![CDATA[Elec_Install_EquipRent_TotalCost_SmallTeleHandle]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q13", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:43 PM")
    AddProperty("8277", "Elec_Install_EquipRent_Weeks_Fork_Truck", <a><![CDATA[Elec_Install_EquipRent_Weeks_Fork_Truck]]></a>.Value, "Elec Install ^'Conveyor Costing'!O14", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:21 PM")
    AddProperty("8275", "Elec_Install_EquipRent_Weeks_LargeBoomLift", <a><![CDATA[Elec_Install_EquipRent_Weeks_LargeBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!O12", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:17 PM")
    AddProperty("8273", "Elec_Install_EquipRent_Weeks_LargeScissorsLift", <a><![CDATA[Elec_Install_EquipRent_Weeks_LargeScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!O10", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:13 PM")
    AddProperty("8274", "Elec_Install_EquipRent_Weeks_SmallBoomLift", <a><![CDATA[Elec_Install_EquipRent_Weeks_SmallBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!O11", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:15 PM")
    AddProperty("8272", "Elec_Install_EquipRent_Weeks_SmallScissorsLift", <a><![CDATA[Elec_Install_EquipRent_Weeks_SmallScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!O9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:11 PM")
    AddProperty("8276", "Elec_Install_EquipRent_Weeks_SmallTeleHandle", <a><![CDATA[Elec_Install_EquipRent_Weeks_SmallTeleHandle]]></a>.Value, "Elec Install ^'Conveyor Costing'!O13", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:19 PM")
    AddProperty("8283", "Elec_Install_EquipRent_WklyRate_Fork_Truck", <a><![CDATA[Elec_Install_EquipRent_WklyRate_Fork_Truck]]></a>.Value, "Elec Install ^'Conveyor Costing'!P14", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:33 PM")
    AddProperty("8281", "Elec_Install_EquipRent_WklyRate_LargeBoomLift", <a><![CDATA[Elec_Install_EquipRent_WklyRate_LargeBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!P12", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:29 PM")
    AddProperty("8279", "Elec_Install_EquipRent_WklyRate_LargeScissorsLift", <a><![CDATA[Elec_Install_EquipRent_WklyRate_LargeScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!P10", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:25 PM")
    AddProperty("8280", "Elec_Install_EquipRent_WklyRate_SmallBoomLift", <a><![CDATA[Elec_Install_EquipRent_WklyRate_SmallBoomLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!P11", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:27 PM")
    AddProperty("8278", "Elec_Install_EquipRent_WklyRate_SmallScissorsLift", <a><![CDATA[Elec_Install_EquipRent_WklyRate_SmallScissorsLift]]></a>.Value, "Elec Install ^'Conveyor Costing'!P9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:23 PM")
    AddProperty("8282", "Elec_Install_EquipRent_WklyRate_SmallTeleHandle", <a><![CDATA[Elec_Install_EquipRent_WklyRate_SmallTeleHandle]]></a>.Value, "Elec Install ^'Conveyor Costing'!P13", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:31 PM")
    AddProperty("8201", "Elec_Install_Factors_Customer_SpecDifficulty", <a><![CDATA[Elec_Install_Factors_Customer_SpecDifficulty]]></a>.Value, "Elec Install ^'Conveyor Costing'!I16", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:40 PM")
    AddProperty("8202", "Elec_Install_Factors_Material_Escalation", <a><![CDATA[Elec_Install_Factors_Material_Escalation]]></a>.Value, "Elec Install ^'Conveyor Costing'!I17", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:42 PM")
    AddProperty("8200", "Elec_Install_Factors_Risk_Rating", <a><![CDATA[Elec_Install_Factors_Risk_Rating]]></a>.Value, "Elec Install ^'Conveyor Costing'!I15", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:38 PM")
    AddProperty("8236", "Elec_Install_HSE_Cost_Per_Diem_Rate_Count", <a><![CDATA[Elec_Install_HSE_Cost_Per_Diem_Rate_Count]]></a>.Value, "Elec Install ^'Conveyor Costing'!I46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:58 PM")
    AddProperty("8238", "Elec_Install_HSE_Cost_Per_Diem_Rate_Price", <a><![CDATA[Elec_Install_HSE_Cost_Per_Diem_Rate_Price]]></a>.Value, "Elec Install ^'Conveyor Costing'!J46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:02 PM")
    AddProperty("8240", "Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot", <a><![CDATA[Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot]]></a>.Value, "Elec Install ^'Conveyor Costing'!K46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:06 PM")
    AddProperty("8241", "Elec_Install_HSE_Cost_Total", <a><![CDATA[Elec_Install_HSE_Cost_Total]]></a>.Value, "Elec Install ^'Conveyor Costing'!K47", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:08 PM")
    AddProperty("8235", "Elec_Install_HSE_Cost_Wages_Count", <a><![CDATA[Elec_Install_HSE_Cost_Wages_Count]]></a>.Value, "Elec Install ^'Conveyor Costing'!I45", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:56 PM")
    AddProperty("8237", "Elec_Install_HSE_Cost_Wages_Price", <a><![CDATA[Elec_Install_HSE_Cost_Wages_Price]]></a>.Value, "Elec Install ^'Conveyor Costing'!J45", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:00 PM")
    AddProperty("8239", "Elec_Install_HSE_Cost_Wages_Price_Total", <a><![CDATA[Elec_Install_HSE_Cost_Wages_Price_Total]]></a>.Value, "Elec Install ^'Conveyor Costing'!K45", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:04 PM")
    AddProperty("8328", "Elec_Install_LaborRate_Current_Rate_IG_Installer", <a><![CDATA[Elec_Install_LaborRate_Current_Rate_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!O48", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:04 PM")
    AddProperty("8327", "Elec_Install_LaborRate_Current_Rate_LeadPerson", <a><![CDATA[Elec_Install_LaborRate_Current_Rate_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!O47", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:02 PM")
    AddProperty("8326", "Elec_Install_LaborRate_Current_Rate_Superintendent", <a><![CDATA[Elec_Install_LaborRate_Current_Rate_Superintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!O46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:00 PM")
    AddProperty("8331", "Elec_Install_LaborRate_New_Rate_IG_Installer", <a><![CDATA[Elec_Install_LaborRate_New_Rate_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!P48", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:10 PM")
    AddProperty("8330", "Elec_Install_LaborRate_New_Rate_LeadPerson", <a><![CDATA[Elec_Install_LaborRate_New_Rate_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!P47", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:08 PM")
    AddProperty("8329", "Elec_Install_LaborRate_New_Rate_Superintendent", <a><![CDATA[Elec_Install_LaborRate_New_Rate_Superintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!P46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:06 PM")
    AddProperty("8325", "Elec_Install_LaborRate_Percent_Adjust_IG_Installer", <a><![CDATA[Elec_Install_LaborRate_Percent_Adjust_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!N48", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:58 PM")
    AddProperty("8324", "Elec_Install_LaborRate_Percent_Adjust_LeadPerson", <a><![CDATA[Elec_Install_LaborRate_Percent_Adjust_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!N47", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:56 PM")
    AddProperty("8323", "Elec_Install_LaborRate_Percent_Adjust_SI", <a><![CDATA[Elec_Install_LaborRate_Percent_Adjust_SI]]></a>.Value, "Elec Install ^'Conveyor Costing'!N46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:54 PM")
    AddProperty("8322", "Elec_Install_LaborRate_Percent_Adjustment", <a><![CDATA[Elec_Install_LaborRate_Percent_Adjustment]]></a>.Value, "Elec Install ^'Conveyor Costing'!N45", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:52 PM")
    AddProperty("8334", "Elec_Install_LaborRate_Tot_Cost_IG_Installer", <a><![CDATA[Elec_Install_LaborRate_Tot_Cost_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q48", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:16 PM")
    AddProperty("8333", "Elec_Install_LaborRate_Tot_Cost_LeadPerson", <a><![CDATA[Elec_Install_LaborRate_Tot_Cost_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q47", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:14 PM")
    AddProperty("8332", "Elec_Install_LaborRate_Tot_Cost_Superintendent", <a><![CDATA[Elec_Install_LaborRate_Tot_Cost_Superintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:12 PM")
    AddProperty("8335", "Elec_Install_LaborRate_Total_Cost_Adjustment", <a><![CDATA[Elec_Install_LaborRate_Total_Cost_Adjustment]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q49", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:18 PM")
    AddProperty("8299", "Elec_Install_MAT_DeviceMatCost_Conduit_Wireway", <a><![CDATA[Elec_Install_MAT_DeviceMatCost_Conduit_Wireway]]></a>.Value, "Elec Install ^'Conveyor Costing'!N32", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:06 PM")
    AddProperty("8301", "Elec_Install_MAT_DeviceMatCost_Total", <a><![CDATA[Elec_Install_MAT_DeviceMatCost_Total]]></a>.Value, "Elec Install ^'Conveyor Costing'!N34", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:10 PM")
    AddProperty("8300", "Elec_Install_MAT_DeviceMatCost_Wire", <a><![CDATA[Elec_Install_MAT_DeviceMatCost_Wire]]></a>.Value, "Elec Install ^'Conveyor Costing'!N33", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:08 PM")
    AddProperty("8302", "Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway", <a><![CDATA[Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway]]></a>.Value, "Elec Install ^'Conveyor Costing'!O32", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:12 PM")
    AddProperty("8304", "Elec_Install_MAT_PowerFeedMatCost_Total", <a><![CDATA[Elec_Install_MAT_PowerFeedMatCost_Total]]></a>.Value, "Elec Install ^'Conveyor Costing'!O34", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:16 PM")
    AddProperty("8303", "Elec_Install_MAT_PowerFeedMatCost_Wire", <a><![CDATA[Elec_Install_MAT_PowerFeedMatCost_Wire]]></a>.Value, "Elec Install ^'Conveyor Costing'!O33", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:14 PM")
    AddProperty("8188", "Elec_Install_Metrics_Commissioning_Total_Cost", <a><![CDATA[Elec_Install_Metrics_Commissioning_Total_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!F45", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:13 PM")
    AddProperty("8180", "Elec_Install_Metrics_Commissioning_Total_Hours", <a><![CDATA[Elec_Install_Metrics_Commissioning_Total_Hours]]></a>.Value, "Elec Install ^'Conveyor Costing'!C49", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:57 PM")
    AddProperty("8193", "Elec_Install_Metrics_Conduit_Cost_Foot", <a><![CDATA[Elec_Install_Metrics_Conduit_Cost_Foot]]></a>.Value, "Elec Install ^'Conveyor Costing'!F50", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:24 PM")
    AddProperty("8177", "Elec_Install_Metrics_Devices_Crew", <a><![CDATA[Elec_Install_Metrics_Devices_Crew]]></a>.Value, "Elec Install ^'Conveyor Costing'!C46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:51 PM")
    AddProperty("8176", "Elec_Install_Metrics_Devices_Foot", <a><![CDATA[Elec_Install_Metrics_Devices_Foot]]></a>.Value, "Elec Install ^'Conveyor Costing'!C45", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:49 PM")
    AddProperty("8191", "Elec_Install_Metrics_IGS_Support_Cost", <a><![CDATA[Elec_Install_Metrics_IGS_Support_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!F48", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:20 PM")
    AddProperty("8179", "Elec_Install_Metrics_Install_Hours_Device", <a><![CDATA[Elec_Install_Metrics_Install_Hours_Device]]></a>.Value, "Elec Install ^'Conveyor Costing'!C48", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:55 PM")
    AddProperty("8187", "Elec_Install_Metrics_Materials_Cost_Device", <a><![CDATA[Elec_Install_Metrics_Materials_Cost_Device]]></a>.Value, "Elec Install ^'Conveyor Costing'!F44", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:11 PM")
    AddProperty("8182", "Elec_Install_Metrics_Percent_Footage_at_Elevation", <a><![CDATA[Elec_Install_Metrics_Percent_Footage_at_Elevation]]></a>.Value, "Elec Install ^'Conveyor Costing'!C51", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:01 PM")
    AddProperty("8190", "Elec_Install_Metrics_Rental_Cost_Week", <a><![CDATA[Elec_Install_Metrics_Rental_Cost_Week]]></a>.Value, "Elec Install ^'Conveyor Costing'!F47", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:18 PM")
    AddProperty("8183", "Elec_Install_Metrics_Rigid_Conduit", <a><![CDATA[Elec_Install_Metrics_Rigid_Conduit]]></a>.Value, "Elec Install ^'Conveyor Costing'!C52", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:03 PM")
    AddProperty("8185", "Elec_Install_Metrics_Total_Conduit_Footage", <a><![CDATA[Elec_Install_Metrics_Total_Conduit_Footage]]></a>.Value, "Elec Install ^'Conveyor Costing'!C54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:07 PM")
    AddProperty("8186", "Elec_Install_Metrics_Total_Cost_Device", <a><![CDATA[Elec_Install_Metrics_Total_Cost_Device]]></a>.Value, "Elec Install ^'Conveyor Costing'!F43", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:09 PM")
    AddProperty("8174", "Elec_Install_Metrics_Total_Devices", <a><![CDATA[Elec_Install_Metrics_Total_Devices]]></a>.Value, "Elec Install ^'Conveyor Costing'!C43", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:45 PM")
    AddProperty("8175", "Elec_Install_Metrics_Total_Footage", <a><![CDATA[Elec_Install_Metrics_Total_Footage]]></a>.Value, "Elec Install ^'Conveyor Costing'!C44", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:47 PM")
    AddProperty("8178", "Elec_Install_Metrics_Total_Hours_Device", <a><![CDATA[Elec_Install_Metrics_Total_Hours_Device]]></a>.Value, "Elec Install ^'Conveyor Costing'!C47", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:53 PM")
    AddProperty("8181", "Elec_Install_Metrics_Total_Stagnant_Hours", <a><![CDATA[Elec_Install_Metrics_Total_Stagnant_Hours]]></a>.Value, "Elec Install ^'Conveyor Costing'!C50", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:59 PM")
    AddProperty("8184", "Elec_Install_Metrics_Total_Wire_Footage", <a><![CDATA[Elec_Install_Metrics_Total_Wire_Footage]]></a>.Value, "Elec Install ^'Conveyor Costing'!C53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:05 PM")
    AddProperty("8189", "Elec_Install_Metrics_Travel_Expense_Resource", <a><![CDATA[Elec_Install_Metrics_Travel_Expense_Resource]]></a>.Value, "Elec Install ^'Conveyor Costing'!F46", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:15 PM")
    AddProperty("8192", "Elec_Install_Metrics_Wire_Cost_Foot", <a><![CDATA[Elec_Install_Metrics_Wire_Cost_Foot]]></a>.Value, "Elec Install ^'Conveyor Costing'!F49", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:22 PM")
    AddProperty("8253", "Elec_Install_MISC_Hours_Customer_Spec_Adder", <a><![CDATA[Elec_Install_MISC_Hours_Customer_Spec_Adder]]></a>.Value, "Elec Install ^'Conveyor Costing'!J53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:32 PM")
    AddProperty("8254", "Elec_Install_MISC_Hours_Elevation_Adder", <a><![CDATA[Elec_Install_MISC_Hours_Elevation_Adder]]></a>.Value, "Elec Install ^'Conveyor Costing'!J54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:34 PM")
    AddProperty("8251", "Elec_Install_MISC_Hours_Layout_Inventory", <a><![CDATA[Elec_Install_MISC_Hours_Layout_Inventory]]></a>.Value, "Elec Install ^'Conveyor Costing'!J51", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:28 PM")
    AddProperty("8255", "Elec_Install_MISC_Hours_Misc_Item_1", <a><![CDATA[Elec_Install_MISC_Hours_Misc_Item_1]]></a>.Value, "Elec Install ^'Conveyor Costing'!J55", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:36 PM")
    AddProperty("8256", "Elec_Install_MISC_Hours_Misc_Item_2", <a><![CDATA[Elec_Install_MISC_Hours_Misc_Item_2]]></a>.Value, "Elec Install ^'Conveyor Costing'!J56", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:38 PM")
    AddProperty("8252", "Elec_Install_MISC_Hours_Shuttle", <a><![CDATA[Elec_Install_MISC_Hours_Shuttle]]></a>.Value, "Elec Install ^'Conveyor Costing'!J52", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:30 PM")
    AddProperty("8250", "Elec_Install_MISC_Hours_System_Efficiency", <a><![CDATA[Elec_Install_MISC_Hours_System_Efficiency]]></a>.Value, "Elec Install ^'Conveyor Costing'!J50", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:26 PM")
    AddProperty("8257", "Elec_Install_MISC_Hours_Total", <a><![CDATA[Elec_Install_MISC_Hours_Total]]></a>.Value, "Elec Install ^'Conveyor Costing'!J57", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:40 PM")
    AddProperty("8261", "Elec_Install_MISC_Percent_Customer_SpecAdder", <a><![CDATA[Elec_Install_MISC_Percent_Customer_SpecAdder]]></a>.Value, "Elec Install ^'Conveyor Costing'!K53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:48 PM")
    AddProperty("8262", "Elec_Install_MISC_Percent_Elevation_Adder", <a><![CDATA[Elec_Install_MISC_Percent_Elevation_Adder]]></a>.Value, "Elec Install ^'Conveyor Costing'!K54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:50 PM")
    AddProperty("8259", "Elec_Install_MISC_Percent_Layout_Inventory", <a><![CDATA[Elec_Install_MISC_Percent_Layout_Inventory]]></a>.Value, "Elec Install ^'Conveyor Costing'!K51", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:44 PM")
    AddProperty("8263", "Elec_Install_MISC_Percent_Misc_Item_1", <a><![CDATA[Elec_Install_MISC_Percent_Misc_Item_1]]></a>.Value, "Elec Install ^'Conveyor Costing'!K55", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:53 PM")
    AddProperty("8264", "Elec_Install_MISC_Percent_Misc_Item_2", <a><![CDATA[Elec_Install_MISC_Percent_Misc_Item_2]]></a>.Value, "Elec Install ^'Conveyor Costing'!K56", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:55 PM")
    AddProperty("8260", "Elec_Install_MISC_Percent_Shuttle", <a><![CDATA[Elec_Install_MISC_Percent_Shuttle]]></a>.Value, "Elec Install ^'Conveyor Costing'!K52", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:46 PM")
    AddProperty("8258", "Elec_Install_MISC_Percent_System_Efficiency", <a><![CDATA[Elec_Install_MISC_Percent_System_Efficiency]]></a>.Value, "Elec Install ^'Conveyor Costing'!K50", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:42 PM")
    AddProperty("8265", "Elec_Install_MISC_Percent_Total", <a><![CDATA[Elec_Install_MISC_Percent_Total]]></a>.Value, "Elec Install ^'Conveyor Costing'!K57", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:57 PM")
    AddProperty("8245", "Elec_Install_MISC_Price_Customer_Spec_Adder", <a><![CDATA[Elec_Install_MISC_Price_Customer_Spec_Adder]]></a>.Value, "Elec Install ^'Conveyor Costing'!I53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:16 PM")
    AddProperty("8246", "Elec_Install_MISC_Price_Elevation_Adder", <a><![CDATA[Elec_Install_MISC_Price_Elevation_Adder]]></a>.Value, "Elec Install ^'Conveyor Costing'!I54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:18 PM")
    AddProperty("8243", "Elec_Install_MISC_Price_Layout_Inventory", <a><![CDATA[Elec_Install_MISC_Price_Layout_Inventory]]></a>.Value, "Elec Install ^'Conveyor Costing'!I51", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:12 PM")
    AddProperty("8247", "Elec_Install_MISC_Price_Misc_Item_1", <a><![CDATA[Elec_Install_MISC_Price_Misc_Item_1]]></a>.Value, "Elec Install ^'Conveyor Costing'!I55", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:20 PM")
    AddProperty("8248", "Elec_Install_MISC_Price_Misc_Item_2", <a><![CDATA[Elec_Install_MISC_Price_Misc_Item_2]]></a>.Value, "Elec Install ^'Conveyor Costing'!I56", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:22 PM")
    AddProperty("8244", "Elec_Install_MISC_Price_Shuttle", <a><![CDATA[Elec_Install_MISC_Price_Shuttle]]></a>.Value, "Elec Install ^'Conveyor Costing'!I52", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:14 PM")
    AddProperty("8242", "Elec_Install_MISC_Price_System_Efficiency", <a><![CDATA[Elec_Install_MISC_Price_System_Efficiency]]></a>.Value, "Elec Install ^'Conveyor Costing'!I50", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:10 PM")
    AddProperty("8249", "Elec_Install_MISC_Price_Total", <a><![CDATA[Elec_Install_MISC_Price_Total]]></a>.Value, "Elec Install ^'Conveyor Costing'!I57", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:02:24 PM")
    AddProperty("8294", "Elec_Install_OtherCost_Duration_Wks", <a><![CDATA[Elec_Install_OtherCost_Duration_Wks]]></a>.Value, "Elec Install ^'Conveyor Costing'!N28", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:55 PM")
    AddProperty("8295", "Elec_Install_OtherCost_Hrs_Per_Week", <a><![CDATA[Elec_Install_OtherCost_Hrs_Per_Week]]></a>.Value, "Elec Install ^'Conveyor Costing'!N29", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:57 PM")
    AddProperty("8293", "Elec_Install_OtherCost_Onsite_Admin", <a><![CDATA[Elec_Install_OtherCost_Onsite_Admin]]></a>.Value, "Elec Install ^'Conveyor Costing'!N27", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:53 PM")
    AddProperty("8292", "Elec_Install_OtherCost_Permit_Hours", <a><![CDATA[Elec_Install_OtherCost_Permit_Hours]]></a>.Value, "Elec Install ^'Conveyor Costing'!N26", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:51 PM")
    AddProperty("8291", "Elec_Install_OtherCost_Qty_Gang_Boxes", <a><![CDATA[Elec_Install_OtherCost_Qty_Gang_Boxes]]></a>.Value, "Elec Install ^'Conveyor Costing'!N25", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:49 PM")
    AddProperty("8290", "Elec_Install_OtherCost_Qty_Trucks", <a><![CDATA[Elec_Install_OtherCost_Qty_Trucks]]></a>.Value, "Elec Install ^'Conveyor Costing'!N24", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:03:47 PM")
    AddProperty("8219", "Elec_Install_PeopleNeed_Comm_Installers", <a><![CDATA[Elec_Install_PeopleNeed_Comm_Installers]]></a>.Value, "Elec Install ^'Conveyor Costing'!J34", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:17 PM")
    AddProperty("8218", "Elec_Install_PeopleNeed_Comm_Lead_Man", <a><![CDATA[Elec_Install_PeopleNeed_Comm_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!J33", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:15 PM")
    AddProperty("8217", "Elec_Install_PeopleNeed_Comm_Superintndnt", <a><![CDATA[Elec_Install_PeopleNeed_Comm_Superintndnt]]></a>.Value, "Elec Install ^'Conveyor Costing'!J32", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:13 PM")
    AddProperty("8216", "Elec_Install_PeopleNeed_Install_Installers", <a><![CDATA[Elec_Install_PeopleNeed_Install_Installers]]></a>.Value, "Elec Install ^'Conveyor Costing'!I34", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:11 PM")
    AddProperty("8215", "Elec_Install_PeopleNeed_Install_Lead_Man", <a><![CDATA[Elec_Install_PeopleNeed_Install_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!I33", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:09 PM")
    AddProperty("8214", "Elec_Install_PeopleNeed_Install_Superintndnt", <a><![CDATA[Elec_Install_PeopleNeed_Install_Superintndnt]]></a>.Value, "Elec Install ^'Conveyor Costing'!I32", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:07 PM")
    AddProperty("8222", "Elec_Install_PeopleNeed_Working_Installers", <a><![CDATA[Elec_Install_PeopleNeed_Working_Installers]]></a>.Value, "Elec Install ^'Conveyor Costing'!K34", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:23 PM")
    AddProperty("8221", "Elec_Install_PeopleNeed_Working_Lead_Man", <a><![CDATA[Elec_Install_PeopleNeed_Working_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!K33", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:21 PM")
    AddProperty("8220", "Elec_Install_PeopleNeed_Working_Superintndnt", <a><![CDATA[Elec_Install_PeopleNeed_Working_Superintndnt]]></a>.Value, "Elec Install ^'Conveyor Costing'!K32", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:01:19 PM")
    AddProperty("8194", "Elec_Install_Project_Info_Customer", <a><![CDATA[Elec_Install_Project_Info_Customer]]></a>.Value, "Elec Install ^'Conveyor Costing'!I8", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:26 PM")
    AddProperty("8197", "Elec_Install_Project_Info_Description", <a><![CDATA[Elec_Install_Project_Info_Description]]></a>.Value, "Elec Install ^'Conveyor Costing'!I11", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:32 PM")
    AddProperty("8195", "Elec_Install_Project_Info_Location", <a><![CDATA[Elec_Install_Project_Info_Location]]></a>.Value, "Elec Install ^'Conveyor Costing'!I9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:28 PM")
    AddProperty("8196", "Elec_Install_Project_Info_Number", <a><![CDATA[Elec_Install_Project_Info_Number]]></a>.Value, "Elec Install ^'Conveyor Costing'!I10", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:30 PM")
    AddProperty("8198", "Elec_Install_Project_Info_Quote_Date", <a><![CDATA[Elec_Install_Project_Info_Quote_Date]]></a>.Value, "Elec Install ^'Conveyor Costing'!I12", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:34 PM")
    AddProperty("8199", "Elec_Install_Project_Tier", <a><![CDATA[Elec_Install_Project_Tier]]></a>.Value, "Elec Install ^'Conveyor Costing'!K8", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:36 PM")
    AddProperty("8208", "Elec_Install_Schedule_Commissioning", <a><![CDATA[Elec_Install_Schedule_Commissioning]]></a>.Value, "Elec Install ^'Conveyor Costing'!J23", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:55 PM")
    AddProperty("8205", "Elec_Install_Schedule_End_Commission_Testing", <a><![CDATA[Elec_Install_Schedule_End_Commission_Testing]]></a>.Value, "Elec Install ^'Conveyor Costing'!I23", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:49 PM")
    AddProperty("8204", "Elec_Install_Schedule_End_Elec_Install", <a><![CDATA[Elec_Install_Schedule_End_Elec_Install]]></a>.Value, "Elec Install ^'Conveyor Costing'!I22", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:47 PM")
    AddProperty("8207", "Elec_Install_Schedule_Install", <a><![CDATA[Elec_Install_Schedule_Install]]></a>.Value, "Elec Install ^'Conveyor Costing'!J22", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:53 PM")
    AddProperty("8203", "Elec_Install_Schedule_Start_Elec_Install", <a><![CDATA[Elec_Install_Schedule_Start_Elec_Install]]></a>.Value, "Elec Install ^'Conveyor Costing'!I21", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:45 PM")
    AddProperty("8206", "Elec_Install_Schedule_Weeks", <a><![CDATA[Elec_Install_Schedule_Weeks]]></a>.Value, "Elec Install ^'Conveyor Costing'!K21", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:00:51 PM")
    AddProperty("8154", "Elec_Install_TotalCosts_AddSubContractService_Cost", <a><![CDATA[Elec_Install_TotalCosts_AddSubContractService_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E36", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:04 PM")
    AddProperty("8156", "Elec_Install_TotalCosts_Administrative_Cost", <a><![CDATA[Elec_Install_TotalCosts_Administrative_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E38", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:08 PM")
    AddProperty("8145", "Elec_Install_TotalCosts_Device_MAT_Conduit_Cost", <a><![CDATA[Elec_Install_TotalCosts_Device_MAT_Conduit_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E27", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:46 PM")
    AddProperty("8144", "Elec_Install_TotalCosts_Device_Materials_Cost", <a><![CDATA[Elec_Install_TotalCosts_Device_Materials_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E26", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:44 PM")
    AddProperty("8146", "Elec_Install_TotalCosts_Device_Materials_Wire_Cost", <a><![CDATA[Elec_Install_TotalCosts_Device_Materials_Wire_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E28", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:48 PM")
    AddProperty("8126", "Elec_Install_TotalCosts_ECI_Cost", <a><![CDATA[Elec_Install_TotalCosts_ECI_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E8", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:07 PM")
    AddProperty("8157", "Elec_Install_TotalCosts_ECI_Hour", <a><![CDATA[Elec_Install_TotalCosts_ECI_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F8", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:10 PM")
    AddProperty("8143", "Elec_Install_TotalCosts_Equipment_Rental_Cost", <a><![CDATA[Elec_Install_TotalCosts_Equipment_Rental_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E25", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:41 PM")
    AddProperty("8141", "Elec_Install_TotalCosts_Installer_ComisonCost", <a><![CDATA[Elec_Install_TotalCosts_Installer_ComisonCost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E23", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:37 PM")
    AddProperty("8172", "Elec_Install_TotalCosts_Installer_ComisonHour", <a><![CDATA[Elec_Install_TotalCosts_Installer_ComisonHour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F23", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:40 PM")
    AddProperty("8135", "Elec_Install_TotalCosts_Installer_Cost", <a><![CDATA[Elec_Install_TotalCosts_Installer_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E17", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:25 PM")
    AddProperty("8138", "Elec_Install_TotalCosts_Installer_Demo_Panel_Cost", <a><![CDATA[Elec_Install_TotalCosts_Installer_Demo_Panel_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E20", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:31 PM")
    AddProperty("8169", "Elec_Install_TotalCosts_Installer_Demo_Panel_Hour", <a><![CDATA[Elec_Install_TotalCosts_Installer_Demo_Panel_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F20", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:34 PM")
    AddProperty("8166", "Elec_Install_TotalCosts_Installer_Hour", <a><![CDATA[Elec_Install_TotalCosts_Installer_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F17", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:28 PM")
    AddProperty("8136", "Elec_Install_TotalCosts_Installer_Install_Cost", <a><![CDATA[Elec_Install_TotalCosts_Installer_Install_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E18", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:27 PM")
    AddProperty("8167", "Elec_Install_TotalCosts_Installer_Install_Hour", <a><![CDATA[Elec_Install_TotalCosts_Installer_Install_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F18", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:30 PM")
    AddProperty("8139", "Elec_Install_TotalCosts_Installer_MiscInstall_Cost", <a><![CDATA[Elec_Install_TotalCosts_Installer_MiscInstall_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E21", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:33 PM")
    AddProperty("8170", "Elec_Install_TotalCosts_Installer_MiscInstall_Hour", <a><![CDATA[Elec_Install_TotalCosts_Installer_MiscInstall_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F21", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:36 PM")
    AddProperty("8137", "Elec_Install_TotalCosts_Installer_PF_Labor_Cost", <a><![CDATA[Elec_Install_TotalCosts_Installer_PF_Labor_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E19", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:29 PM")
    AddProperty("8168", "Elec_Install_TotalCosts_Installer_PF_Labor_Hour", <a><![CDATA[Elec_Install_TotalCosts_Installer_PF_Labor_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F19", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:32 PM")
    AddProperty("8125", "Elec_Install_TotalCosts_Installer_Rate", <a><![CDATA[Elec_Install_TotalCosts_Installer_Rate]]></a>.Value, "Elec Install ^'Conveyor Costing'!D17", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:05 PM")
    AddProperty("8140", "Elec_Install_TotalCosts_Installer_SH_Cost", <a><![CDATA[Elec_Install_TotalCosts_Installer_SH_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E22", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:35 PM")
    AddProperty("8171", "Elec_Install_TotalCosts_Installer_SH_Hour", <a><![CDATA[Elec_Install_TotalCosts_Installer_SH_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F22", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:38 PM")
    AddProperty("8142", "Elec_Install_TotalCosts_Installer_Working_SLD_Cost", <a><![CDATA[Elec_Install_TotalCosts_Installer_Working_SLD_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E24", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:39 PM")
    AddProperty("8173", "Elec_Install_TotalCosts_Installer_Working_SLD_Hour", <a><![CDATA[Elec_Install_TotalCosts_Installer_Working_SLD_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F24", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:42 PM")
    AddProperty("8134", "Elec_Install_TotalCosts_Lead_Person_ComisonCost", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_ComisonCost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E16", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:23 PM")
    AddProperty("8165", "Elec_Install_TotalCosts_Lead_Person_ComisonHour", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_ComisonHour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F16", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:26 PM")
    AddProperty("8131", "Elec_Install_TotalCosts_Lead_Person_Cost", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E13", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:17 PM")
    AddProperty("8162", "Elec_Install_TotalCosts_Lead_Person_Hour", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F13", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:20 PM")
    AddProperty("8132", "Elec_Install_TotalCosts_Lead_Person_InstallCost", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_InstallCost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E14", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:19 PM")
    AddProperty("8163", "Elec_Install_TotalCosts_Lead_Person_InstallHour", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_InstallHour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F14", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:22 PM")
    AddProperty("8124", "Elec_Install_TotalCosts_Lead_Person_Rate", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_Rate]]></a>.Value, "Elec Install ^'Conveyor Costing'!D13", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:02 PM")
    AddProperty("8133", "Elec_Install_TotalCosts_Lead_Person_SH_Cost", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_SH_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E15", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:21 PM")
    AddProperty("8164", "Elec_Install_TotalCosts_Lead_Person_SH_Hour", <a><![CDATA[Elec_Install_TotalCosts_Lead_Person_SH_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F15", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:24 PM")
    AddProperty("8155", "Elec_Install_TotalCosts_Miscellaneous_Cost", <a><![CDATA[Elec_Install_TotalCosts_Miscellaneous_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E37", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:06 PM")
    AddProperty("8153", "Elec_Install_TotalCosts_Permits_Cost", <a><![CDATA[Elec_Install_TotalCosts_Permits_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E35", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:02 PM")
    AddProperty("8148", "Elec_Install_TotalCosts_PF_Materials_Conduit_Cost", <a><![CDATA[Elec_Install_TotalCosts_PF_Materials_Conduit_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E30", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:52 PM")
    AddProperty("8147", "Elec_Install_TotalCosts_PF_Materials_Cost", <a><![CDATA[Elec_Install_TotalCosts_PF_Materials_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E29", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:50 PM")
    AddProperty("8149", "Elec_Install_TotalCosts_PF_Materials_Wire_Cost", <a><![CDATA[Elec_Install_TotalCosts_PF_Materials_Wire_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E31", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:54 PM")
    AddProperty("8130", "Elec_Install_TotalCosts_Superintendent_ComisonCost", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_ComisonCost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E12", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:15 PM")
    AddProperty("8161", "Elec_Install_TotalCosts_Superintendent_ComisonHour", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_ComisonHour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F12", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:18 PM")
    AddProperty("8127", "Elec_Install_TotalCosts_Superintendent_Cost", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:09 PM")
    AddProperty("8158", "Elec_Install_TotalCosts_Superintendent_Hour", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:12 PM")
    AddProperty("8128", "Elec_Install_TotalCosts_Superintendent_InstallCost", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_InstallCost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E10", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:11 PM")
    AddProperty("8159", "Elec_Install_TotalCosts_Superintendent_InstallHour", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_InstallHour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F10", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:14 PM")
    AddProperty("8123", "Elec_Install_TotalCosts_Superintendent_Rate", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_Rate]]></a>.Value, "Elec Install ^'Conveyor Costing'!D9", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:00 PM")
    AddProperty("8129", "Elec_Install_TotalCosts_Superintendent_SH_Cost", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_SH_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E11", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:13 PM")
    AddProperty("8160", "Elec_Install_TotalCosts_Superintendent_SH_Hour", <a><![CDATA[Elec_Install_TotalCosts_Superintendent_SH_Hour]]></a>.Value, "Elec Install ^'Conveyor Costing'!F11", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:16 PM")
    AddProperty("8150", "Elec_Install_TotalCosts_Travel_Expense_Cost", <a><![CDATA[Elec_Install_TotalCosts_Travel_Expense_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E32", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:56 PM")
    AddProperty("8152", "Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost", <a><![CDATA[Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E34", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:59:00 PM")
    AddProperty("8151", "Elec_Install_TotalCosts_Travel_Expense_PerDiemCost", <a><![CDATA[Elec_Install_TotalCosts_Travel_Expense_PerDiemCost]]></a>.Value, "Elec Install ^'Conveyor Costing'!E33", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 4:58:58 PM")
    AddProperty("8309", "Elec_Install_TravelCost_Crew_PerDiem_Installer", <a><![CDATA[Elec_Install_TravelCost_Crew_PerDiem_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!N41", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:26 PM")
    AddProperty("8308", "Elec_Install_TravelCost_Crew_PerDiem_Lead_Man", <a><![CDATA[Elec_Install_TravelCost_Crew_PerDiem_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!N40", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:24 PM")
    AddProperty("8307", "Elec_Install_TravelCost_Crew_PerDiemSuperintendent", <a><![CDATA[Elec_Install_TravelCost_Crew_PerDiemSuperintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!N39", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:22 PM")
    AddProperty("8317", "Elec_Install_TravelCost_Crew_Total_Mob_Cost", <a><![CDATA[Elec_Install_TravelCost_Crew_Total_Mob_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!P42", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:42 PM")
    AddProperty("8313", "Elec_Install_TravelCost_Crew_Total_Per_Diem", <a><![CDATA[Elec_Install_TravelCost_Crew_Total_Per_Diem]]></a>.Value, "Elec Install ^'Conveyor Costing'!O42", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:34 PM")
    AddProperty("8321", "Elec_Install_TravelCost_Crew_Total_Travel_Cost", <a><![CDATA[Elec_Install_TravelCost_Crew_Total_Travel_Cost]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q42", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:50 PM")
    AddProperty("8312", "Elec_Install_TravelCost_Crew_TotalDiem_Installer", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalDiem_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!O41", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:32 PM")
    AddProperty("8311", "Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!O40", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:30 PM")
    AddProperty("8310", "Elec_Install_TravelCost_Crew_TotalDiem_SI", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalDiem_SI]]></a>.Value, "Elec Install ^'Conveyor Costing'!O39", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:28 PM")
    AddProperty("8316", "Elec_Install_TravelCost_Crew_TotalMob_Installer", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalMob_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!P41", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:40 PM")
    AddProperty("8315", "Elec_Install_TravelCost_Crew_TotalMob_Lead_Man", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalMob_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!P40", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:38 PM")
    AddProperty("8314", "Elec_Install_TravelCost_Crew_TotalMob_SI", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalMob_SI]]></a>.Value, "Elec Install ^'Conveyor Costing'!P39", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:36 PM")
    AddProperty("8320", "Elec_Install_TravelCost_Crew_TotalTravel_Installer", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalTravel_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q41", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:48 PM")
    AddProperty("8319", "Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q40", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:46 PM")
    AddProperty("8318", "Elec_Install_TravelCost_Crew_TotalTravel_SI", <a><![CDATA[Elec_Install_TravelCost_Crew_TotalTravel_SI]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q39", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:44 PM")
    AddProperty("8305", "Elec_Install_TravelCost_Per_Diem_Range", <a><![CDATA[Elec_Install_TravelCost_Per_Diem_Range]]></a>.Value, "Elec Install ^'Conveyor Costing'!N37", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:18 PM")
    AddProperty("8306", "Elec_Install_TravelCost_Per_Diem_Range_Link", <a><![CDATA[Elec_Install_TravelCost_Per_Diem_Range_Link]]></a>.Value, "Elec Install ^'Conveyor Costing'!O37", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:04:20 PM")
    AddProperty("8342", "Elec_Install_UnionRate_Current_Rate_IG_Installer", <a><![CDATA[Elec_Install_UnionRate_Current_Rate_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!O55", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:32 PM")
    AddProperty("8341", "Elec_Install_UnionRate_Current_Rate_LeadPerson", <a><![CDATA[Elec_Install_UnionRate_Current_Rate_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!O54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:30 PM")
    AddProperty("8340", "Elec_Install_UnionRate_Current_Rate_Superintendent", <a><![CDATA[Elec_Install_UnionRate_Current_Rate_Superintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!O53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:28 PM")
    AddProperty("8345", "Elec_Install_UnionRate_New_Rate_IG_Installer", <a><![CDATA[Elec_Install_UnionRate_New_Rate_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!P55", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:38 PM")
    AddProperty("8344", "Elec_Install_UnionRate_New_Rate_LeadPerson", <a><![CDATA[Elec_Install_UnionRate_New_Rate_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!P54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:36 PM")
    AddProperty("8343", "Elec_Install_UnionRate_New_Rate_Superintendent", <a><![CDATA[Elec_Install_UnionRate_New_Rate_Superintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!P53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:34 PM")
    AddProperty("8339", "Elec_Install_UnionRate_Percent_Adjust_IG_Installer", <a><![CDATA[Elec_Install_UnionRate_Percent_Adjust_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!N55", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:26 PM")
    AddProperty("8338", "Elec_Install_UnionRate_Percent_Adjust_LeadPerson", <a><![CDATA[Elec_Install_UnionRate_Percent_Adjust_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!N54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:24 PM")
    AddProperty("8337", "Elec_Install_UnionRate_Percent_Adjust_SI", <a><![CDATA[Elec_Install_UnionRate_Percent_Adjust_SI]]></a>.Value, "Elec Install ^'Conveyor Costing'!N53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:22 PM")
    AddProperty("8336", "Elec_Install_UnionRate_Percent_Adjustment", <a><![CDATA[Elec_Install_UnionRate_Percent_Adjustment]]></a>.Value, "Elec Install ^'Conveyor Costing'!N52", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:20 PM")
    AddProperty("8348", "Elec_Install_UnionRate_Tot_Cost_IG_Installer", <a><![CDATA[Elec_Install_UnionRate_Tot_Cost_IG_Installer]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q55", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:44 PM")
    AddProperty("8347", "Elec_Install_UnionRate_Tot_Cost_LeadPerson", <a><![CDATA[Elec_Install_UnionRate_Tot_Cost_LeadPerson]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q54", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:42 PM")
    AddProperty("8346", "Elec_Install_UnionRate_Tot_Cost_Superintendent", <a><![CDATA[Elec_Install_UnionRate_Tot_Cost_Superintendent]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q53", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:40 PM")
    AddProperty("8349", "Elec_Install_UnionRate_Total_Cost_Adjustment", <a><![CDATA[Elec_Install_UnionRate_Total_Cost_Adjustment]]></a>.Value, "Elec Install ^'Conveyor Costing'!Q56", "Double","","Elec Install","FD", 9999, "", 0,0, "", "", "GLOBAL\H581955", "7/3/2025 5:05:46 PM")
    AddProperty("6161", "PartNumber", <a><![CDATA[Part Number]]></a>.Value, "", "String","N","System","MN", 9999, "", 0,0, "", "", "GLOBAL\H602502", "7/1/2025 11:46:43 AM")
    
    End Sub

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Public Sub Initialize_Process(ByVal lngProcessID as Integer) Implements RuleStream.IRsPartFormulas.InitializeProcess
    Select Case lngProcessID
    
    Case Else
    Process = "DefaultProcess"
    End Select
    End Sub

    

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Private Sub NewContextInit_Properties()
    Dim ctx as String
    ctx = ContextId
    
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_ConvElev_Footage_Conveyor_above_8Feet", "7884", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:01 PM", "", "In Development",  0,12433)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet", "7883", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:59 PM", "", "In Development",  0,12431)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_ConvElev_Footage_Hours_Added", "7885", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:03 PM", "", "In Development",  0,12435)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Average_Crew_Size", "7800", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:05 PM", "", "In Development",  0,12265)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Average_Hrs_per_Wk", "7796", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:57 PM", "", "In Development",  0,12257)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk", "7797", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:59 PM", "", "In Development",  0,12259)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Head_Count_Installer", "7816", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:37 PM", "", "In Development",  0,12297)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Head_Count_Lead_Man", "7815", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:35 PM", "", "In Development",  0,12295)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Head_CountSuperintendent", "7814", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:33 PM", "", "In Development",  0,12293)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Mobile_Cost_Installer", "7820", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:45 PM", "", "In Development",  0,12305)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Mobile_Cost_Lead_Man", "7819", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:43 PM", "", "In Development",  0,12303)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Mobile_Cost_Superintendent", "7818", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:41 PM", "", "In Development",  0,12301)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Mobile_Count_Installer", "7813", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:31 PM", "", "In Development",  0,12291)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Mobile_Count_Lead_Man", "7812", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:29 PM", "", "In Development",  0,12289)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Mobile_CountSuperintendent", "7811", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:27 PM", "", "In Development",  0,12287)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_install_Crew_Mobilization_CostPerPerson", "7810", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:25 PM", "", "In Development",  0,12285)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Peak_Crew", "7799", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:03 PM", "", "In Development",  0,12263)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Peak_CrewMultiplierInstall", "7798", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:01 PM", "", "In Development",  0,12261)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Total_Head_Count", "7817", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:39 PM", "", "In Development",  0,12299)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Crew_Total_Mobile_Cost", "7821", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:54 PM", "", "In Development",  0,12307)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Qnty_Fork_Truck", "7858", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:09 PM", "", "In Development",  0,12381)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Qnty_LargeBoomLift", "7856", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:05 PM", "", "In Development",  0,12377)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Qnty_LargeScissorsLift", "7854", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:01 PM", "", "In Development",  0,12373)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Qnty_SmallBoomLift", "7855", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:03 PM", "", "In Development",  0,12375)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Qnty_SmallScissorsLift", "7853", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:59 PM", "", "In Development",  0,12371)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Qnty_SmallTeleHandle", "7857", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:07 PM", "", "In Development",  0,12379)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_TotalCost_Fork_Truck", "7876", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:45 PM", "", "In Development",  0,12417)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_TotalCost_LargeBoomLift", "7874", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:41 PM", "", "In Development",  0,12413)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_TotalCost_LargeScissorsLift", "7872", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:37 PM", "", "In Development",  0,12409)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_TotalCost_SmallBoomLift", "7873", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:39 PM", "", "In Development",  0,12411)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_TotalCost_SmallScissorsLift", "7871", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:35 PM", "", "In Development",  0,12407)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_TotalCost_SmallTeleHandle", "7875", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:43 PM", "", "In Development",  0,12415)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Weeks_Fork_Truck", "7864", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:21 PM", "", "In Development",  0,12393)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Weeks_LargeBoomLift", "7862", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:17 PM", "", "In Development",  0,12389)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Weeks_LargeScissorsLift", "7860", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:13 PM", "", "In Development",  0,12385)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Weeks_SmallBoomLift", "7861", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:15 PM", "", "In Development",  0,12387)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Weeks_SmallScissorsLift", "7859", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:11 PM", "", "In Development",  0,12383)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_Weeks_SmallTeleHandle", "7863", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:19 PM", "", "In Development",  0,12391)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_WklyRate_Fork_Truck", "7870", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:33 PM", "", "In Development",  0,12405)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_WklyRate_LargeBoomLift", "7868", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:29 PM", "", "In Development",  0,12401)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_WklyRate_LargeScissorsLift", "7866", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:25 PM", "", "In Development",  0,12397)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_WklyRate_SmallBoomLift", "7867", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:27 PM", "", "In Development",  0,12399)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_WklyRate_SmallScissorsLift", "7865", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:23 PM", "", "In Development",  0,12395)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_EquipRent_WklyRate_SmallTeleHandle", "7869", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:31 PM", "", "In Development",  0,12403)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Factors_Customer_SpecDifficulty", "7788", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:40 PM", "", "In Development",  0,12241)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Factors_Material_Escalation", "7789", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:42 PM", "", "In Development",  0,12243)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Factors_Risk_Rating", "7787", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:38 PM", "", "In Development",  0,12239)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_HSE_Cost_Per_Diem_Rate_Count", "7823", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:58 PM", "", "In Development",  0,12311)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_HSE_Cost_Per_Diem_Rate_Price", "7825", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:02 PM", "", "In Development",  0,12315)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot", "7827", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:06 PM", "", "In Development",  0,12319)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_HSE_Cost_Total", "7828", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:08 PM", "", "In Development",  0,12321)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_HSE_Cost_Wages_Count", "7822", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:56 PM", "", "In Development",  0,12309)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_HSE_Cost_Wages_Price", "7824", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:00 PM", "", "In Development",  0,12313)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_HSE_Cost_Wages_Price_Total", "7826", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:04 PM", "", "In Development",  0,12317)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Current_Rate_IG_Installer", "7915", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:04 PM", "", "In Development",  0,12495)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Current_Rate_LeadPerson", "7914", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:02 PM", "", "In Development",  0,12493)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Current_Rate_Superintendent", "7913", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:00 PM", "", "In Development",  0,12491)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_New_Rate_IG_Installer", "7918", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:10 PM", "", "In Development",  0,12501)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_New_Rate_LeadPerson", "7917", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:08 PM", "", "In Development",  0,12499)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_New_Rate_Superintendent", "7916", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:06 PM", "", "In Development",  0,12497)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Percent_Adjust_IG_Installer", "7912", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:58 PM", "", "In Development",  0,12489)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Percent_Adjust_LeadPerson", "7911", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:56 PM", "", "In Development",  0,12487)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Percent_Adjust_SI", "7910", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:54 PM", "", "In Development",  0,12485)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Percent_Adjustment", "7909", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:52 PM", "", "In Development",  0,12483)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Tot_Cost_IG_Installer", "7921", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:16 PM", "", "In Development",  0,12507)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Tot_Cost_LeadPerson", "7920", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:14 PM", "", "In Development",  0,12505)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Tot_Cost_Superintendent", "7919", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:12 PM", "", "In Development",  0,12503)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_LaborRate_Total_Cost_Adjustment", "7922", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:18 PM", "", "In Development",  0,12509)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MAT_DeviceMatCost_Conduit_Wireway", "7886", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:06 PM", "", "In Development",  0,12437)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MAT_DeviceMatCost_Total", "7888", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:10 PM", "", "In Development",  0,12441)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MAT_DeviceMatCost_Wire", "7887", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:08 PM", "", "In Development",  0,12439)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway", "7889", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:12 PM", "", "In Development",  0,12443)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MAT_PowerFeedMatCost_Total", "7891", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:16 PM", "", "In Development",  0,12447)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MAT_PowerFeedMatCost_Wire", "7890", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:14 PM", "", "In Development",  0,12445)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Commissioning_Total_Cost", "7775", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:13 PM", "", "In Development",  0,12215)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Commissioning_Total_Hours", "7767", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:57 PM", "", "In Development",  0,12199)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Conduit_Cost_Foot", "7780", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:24 PM", "", "In Development",  0,12225)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Devices_Crew", "7764", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:51 PM", "", "In Development",  0,12193)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Devices_Foot", "7763", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:49 PM", "", "In Development",  0,12191)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_IGS_Support_Cost", "7778", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:20 PM", "", "In Development",  0,12221)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Install_Hours_Device", "7766", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:55 PM", "", "In Development",  0,12197)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Materials_Cost_Device", "7774", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:11 PM", "", "In Development",  0,12213)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Percent_Footage_at_Elevation", "7769", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:01 PM", "", "In Development",  0,12203)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Rental_Cost_Week", "7777", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:18 PM", "", "In Development",  0,12219)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Rigid_Conduit", "7770", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:03 PM", "", "In Development",  0,12205)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Total_Conduit_Footage", "7772", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:07 PM", "", "In Development",  0,12209)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Total_Cost_Device", "7773", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:09 PM", "", "In Development",  0,12211)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Total_Devices", "7761", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:45 PM", "", "In Development",  0,12187)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Total_Footage", "7762", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:47 PM", "", "In Development",  0,12189)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Total_Hours_Device", "7765", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:53 PM", "", "In Development",  0,12195)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Total_Stagnant_Hours", "7768", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:59 PM", "", "In Development",  0,12201)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Total_Wire_Footage", "7771", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:05 PM", "", "In Development",  0,12207)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Travel_Expense_Resource", "7776", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:15 PM", "", "In Development",  0,12217)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Metrics_Wire_Cost_Foot", "7779", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:22 PM", "", "In Development",  0,12223)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_Customer_Spec_Adder", "7840", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:32 PM", "", "In Development",  0,12345)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_Elevation_Adder", "7841", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:34 PM", "", "In Development",  0,12347)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_Layout_Inventory", "7838", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:28 PM", "", "In Development",  0,12341)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_Misc_Item_1", "7842", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:36 PM", "", "In Development",  0,12349)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_Misc_Item_2", "7843", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:38 PM", "", "In Development",  0,12351)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_Shuttle", "7839", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:30 PM", "", "In Development",  0,12343)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_System_Efficiency", "7837", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:26 PM", "", "In Development",  0,12339)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Hours_Total", "7844", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:40 PM", "", "In Development",  0,12353)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_Customer_SpecAdder", "7848", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:48 PM", "", "In Development",  0,12361)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_Elevation_Adder", "7849", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:50 PM", "", "In Development",  0,12363)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_Layout_Inventory", "7846", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:44 PM", "", "In Development",  0,12357)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_Misc_Item_1", "7850", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:53 PM", "", "In Development",  0,12365)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_Misc_Item_2", "7851", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:55 PM", "", "In Development",  0,12367)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_Shuttle", "7847", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:46 PM", "", "In Development",  0,12359)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_System_Efficiency", "7845", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:42 PM", "", "In Development",  0,12355)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Percent_Total", "7852", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:57 PM", "", "In Development",  0,12369)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_Customer_Spec_Adder", "7832", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:16 PM", "", "In Development",  0,12329)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_Elevation_Adder", "7833", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:18 PM", "", "In Development",  0,12331)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_Layout_Inventory", "7830", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:12 PM", "", "In Development",  0,12325)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_Misc_Item_1", "7834", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:20 PM", "", "In Development",  0,12333)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_Misc_Item_2", "7835", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:22 PM", "", "In Development",  0,12335)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_Shuttle", "7831", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:14 PM", "", "In Development",  0,12327)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_System_Efficiency", "7829", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:10 PM", "", "In Development",  0,12323)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_MISC_Price_Total", "7836", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:02:24 PM", "", "In Development",  0,12337)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_OtherCost_Duration_Wks", "7881", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:55 PM", "", "In Development",  0,12427)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_OtherCost_Hrs_Per_Week", "7882", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:57 PM", "", "In Development",  0,12429)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_OtherCost_Onsite_Admin", "7880", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:53 PM", "", "In Development",  0,12425)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_OtherCost_Permit_Hours", "7879", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:51 PM", "", "In Development",  0,12423)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_OtherCost_Qty_Gang_Boxes", "7878", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:49 PM", "", "In Development",  0,12421)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_OtherCost_Qty_Trucks", "7877", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:03:47 PM", "", "In Development",  0,12419)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Comm_Installers", "7806", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:17 PM", "", "In Development",  0,12277)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Comm_Lead_Man", "7805", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:15 PM", "", "In Development",  0,12275)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Comm_Superintndnt", "7804", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:13 PM", "", "In Development",  0,12273)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Install_Installers", "7803", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:11 PM", "", "In Development",  0,12271)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Install_Lead_Man", "7802", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:09 PM", "", "In Development",  0,12269)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Install_Superintndnt", "7801", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:07 PM", "", "In Development",  0,12267)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Working_Installers", "7809", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:23 PM", "", "In Development",  0,12283)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Working_Lead_Man", "7808", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:21 PM", "", "In Development",  0,12281)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_PeopleNeed_Working_Superintndnt", "7807", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:01:19 PM", "", "In Development",  0,12279)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Project_Info_Customer", "7781", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:26 PM", "", "In Development",  0,12227)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Project_Info_Description", "7784", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:32 PM", "", "In Development",  0,12233)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Project_Info_Location", "7782", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:28 PM", "", "In Development",  0,12229)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Project_Info_Number", "7783", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:30 PM", "", "In Development",  0,12231)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Project_Info_Quote_Date", "7785", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:34 PM", "", "In Development",  0,12235)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Project_Tier", "7786", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:36 PM", "", "In Development",  0,12237)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Schedule_Commissioning", "7795", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:55 PM", "", "In Development",  0,12255)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Schedule_End_Commission_Testing", "7792", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:49 PM", "", "In Development",  0,12249)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Schedule_End_Elec_Install", "7791", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:47 PM", "", "In Development",  0,12247)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Schedule_Install", "7794", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:53 PM", "", "In Development",  0,12253)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Schedule_Start_Elec_Install", "7790", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:45 PM", "", "In Development",  0,12245)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_Schedule_Weeks", "7793", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:00:51 PM", "", "In Development",  0,12251)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_AddSubContractService_Cost", "7741", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:04 PM", "", "In Development",  0,12147)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Administrative_Cost", "7743", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:08 PM", "", "In Development",  0,12151)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Device_MAT_Conduit_Cost", "7732", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:46 PM", "", "In Development",  0,12129)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Device_Materials_Cost", "7731", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:44 PM", "", "In Development",  0,12127)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Device_Materials_Wire_Cost", "7733", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:48 PM", "", "In Development",  0,12131)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_ECI_Cost", "7713", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:07 PM", "", "In Development",  0,12091)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_ECI_Hour", "7744", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:10 PM", "", "In Development",  0,12153)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Equipment_Rental_Cost", "7730", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:41 PM", "", "In Development",  0,12125)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_ComisonCost", "7728", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:37 PM", "", "In Development",  0,12121)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_ComisonHour", "7759", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:40 PM", "", "In Development",  0,12183)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Cost", "7722", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:25 PM", "", "In Development",  0,12109)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Demo_Panel_Cost", "7725", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:31 PM", "", "In Development",  0,12115)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Demo_Panel_Hour", "7756", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:34 PM", "", "In Development",  0,12177)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Hour", "7753", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:28 PM", "", "In Development",  0,12171)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Install_Cost", "7723", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:27 PM", "", "In Development",  0,12111)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Install_Hour", "7754", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:30 PM", "", "In Development",  0,12173)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_MiscInstall_Cost", "7726", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:33 PM", "", "In Development",  0,12117)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_MiscInstall_Hour", "7757", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:36 PM", "", "In Development",  0,12179)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_PF_Labor_Cost", "7724", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:29 PM", "", "In Development",  0,12113)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_PF_Labor_Hour", "7755", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:32 PM", "", "In Development",  0,12175)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Rate", "7712", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:05 PM", "", "In Development",  0,12089)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_SH_Cost", "7727", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:35 PM", "", "In Development",  0,12119)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_SH_Hour", "7758", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:38 PM", "", "In Development",  0,12181)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Working_SLD_Cost", "7729", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:39 PM", "", "In Development",  0,12123)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Installer_Working_SLD_Hour", "7760", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:42 PM", "", "In Development",  0,12185)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_ComisonCost", "7721", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:23 PM", "", "In Development",  0,12107)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_ComisonHour", "7752", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:26 PM", "", "In Development",  0,12169)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_Cost", "7718", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:17 PM", "", "In Development",  0,12101)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_Hour", "7749", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:20 PM", "", "In Development",  0,12163)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_InstallCost", "7719", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:19 PM", "", "In Development",  0,12103)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_InstallHour", "7750", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:22 PM", "", "In Development",  0,12165)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_Rate", "7711", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:02 PM", "", "In Development",  0,12087)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_SH_Cost", "7720", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:21 PM", "", "In Development",  0,12105)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Lead_Person_SH_Hour", "7751", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:24 PM", "", "In Development",  0,12167)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Miscellaneous_Cost", "7742", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:06 PM", "", "In Development",  0,12149)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Permits_Cost", "7740", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:02 PM", "", "In Development",  0,12145)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_PF_Materials_Conduit_Cost", "7735", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:52 PM", "", "In Development",  0,12135)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_PF_Materials_Cost", "7734", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:50 PM", "", "In Development",  0,12133)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_PF_Materials_Wire_Cost", "7736", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:54 PM", "", "In Development",  0,12137)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_ComisonCost", "7717", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:15 PM", "", "In Development",  0,12099)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_ComisonHour", "7748", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:18 PM", "", "In Development",  0,12161)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_Cost", "7714", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:09 PM", "", "In Development",  0,12093)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_Hour", "7745", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:12 PM", "", "In Development",  0,12155)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_InstallCost", "7715", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:11 PM", "", "In Development",  0,12095)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_InstallHour", "7746", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:14 PM", "", "In Development",  0,12157)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_Rate", "7710", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:00 PM", "", "In Development",  0,12085)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_SH_Cost", "7716", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:13 PM", "", "In Development",  0,12097)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Superintendent_SH_Hour", "7747", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:16 PM", "", "In Development",  0,12159)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Travel_Expense_Cost", "7737", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:56 PM", "", "In Development",  0,12139)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost", "7739", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:59:00 PM", "", "In Development",  0,12143)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TotalCosts_Travel_Expense_PerDiemCost", "7738", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 4:58:58 PM", "", "In Development",  0,12141)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_PerDiem_Installer", "7896", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:26 PM", "", "In Development",  0,12457)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_PerDiem_Lead_Man", "7895", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:24 PM", "", "In Development",  0,12455)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_PerDiemSuperintendent", "7894", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:22 PM", "", "In Development",  0,12453)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_Total_Mob_Cost", "7904", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:42 PM", "", "In Development",  0,12473)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_Total_Per_Diem", "7900", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:34 PM", "", "In Development",  0,12465)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_Total_Travel_Cost", "7908", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:50 PM", "", "In Development",  0,12481)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalDiem_Installer", "7899", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:32 PM", "", "In Development",  0,12463)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man", "7898", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:30 PM", "", "In Development",  0,12461)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalDiem_SI", "7897", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:28 PM", "", "In Development",  0,12459)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalMob_Installer", "7903", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:40 PM", "", "In Development",  0,12471)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalMob_Lead_Man", "7902", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:38 PM", "", "In Development",  0,12469)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalMob_SI", "7901", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:36 PM", "", "In Development",  0,12467)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalTravel_Installer", "7907", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:48 PM", "", "In Development",  0,12479)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man", "7906", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:46 PM", "", "In Development",  0,12477)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Crew_TotalTravel_SI", "7905", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:44 PM", "", "In Development",  0,12475)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Per_Diem_Range", "7892", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:18 PM", "", "In Development",  0,12449)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_TravelCost_Per_Diem_Range_Link", "7893", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:04:20 PM", "", "In Development",  0,12451)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Current_Rate_IG_Installer", "7929", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:32 PM", "", "In Development",  0,12523)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Current_Rate_LeadPerson", "7928", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:30 PM", "", "In Development",  0,12521)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Current_Rate_Superintendent", "7927", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:28 PM", "", "In Development",  0,12519)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_New_Rate_IG_Installer", "7932", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:38 PM", "", "In Development",  0,12529)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_New_Rate_LeadPerson", "7931", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:36 PM", "", "In Development",  0,12527)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_New_Rate_Superintendent", "7930", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:34 PM", "", "In Development",  0,12525)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Percent_Adjust_IG_Installer", "7926", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:26 PM", "", "In Development",  0,12517)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Percent_Adjust_LeadPerson", "7925", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:24 PM", "", "In Development",  0,12515)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Percent_Adjust_SI", "7924", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:22 PM", "", "In Development",  0,12513)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Percent_Adjustment", "7923", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:20 PM", "", "In Development",  0,12511)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Tot_Cost_IG_Installer", "7935", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:44 PM", "", "In Development",  0,12535)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Tot_Cost_LeadPerson", "7934", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:42 PM", "", "In Development",  0,12533)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Tot_Cost_Superintendent", "7933", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:40 PM", "", "In Development",  0,12531)
        End If
            If Incontext("-1", ctx) Then
          InitProperty("Elec_Install_UnionRate_Total_Cost_Adjustment", "7936", "", "", "Y", "","", 0, "-1", 0, "", "N","0",  "GLOBAL\H581955", "7/3/2025 5:05:46 PM", "", "In Development",  0,12537)
        End If
    End Sub

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Private Sub NewContextInit_ValidValues()
    Dim ctx as String
    ctx = ContextId
    End Sub

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Private Sub NewContextInit_Subparts()
    Dim ctx as String
    ctx = ContextId
    End Sub

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Private Sub NewContextInit_Connections()
    Dim ctx as String
    ctx = ContextId
    End Sub

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Private Sub NewContextInit_DB()
    Dim ctx as String
    ctx = ContextId
    End Sub

    #End Region

    #Region " Formulas "

    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_ConvElev_Footage_Conveyor_above_8Feet").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7884; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7884; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7883; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7883; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_ConvElev_Footage_Hours_Added() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_ConvElev_Footage_Hours_Added").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7885; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7885; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Hours_Added", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Average_Crew_Size() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Average_Crew_Size").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7800; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7800; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Average_Crew_Size", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Average_Hrs_per_Wk() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Average_Hrs_per_Wk").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7796; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7796; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Average_Hrs_per_Wk", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7797; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7797; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Head_Count_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Head_Count_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7816; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7816; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_Count_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Head_Count_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Head_Count_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7815; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7815; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_Count_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Head_CountSuperintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Head_CountSuperintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7814; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7814; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_CountSuperintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Mobile_Cost_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7820; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7820; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Mobile_Cost_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7819; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7819; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Superintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Mobile_Cost_Superintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7818; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7818; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Superintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Count_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Mobile_Count_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7813; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7813; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Count_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Count_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Mobile_Count_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7812; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7812; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Count_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_CountSuperintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Mobile_CountSuperintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7811; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7811; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_CountSuperintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_install_Crew_Mobilization_CostPerPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_install_Crew_Mobilization_CostPerPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7810; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7810; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_install_Crew_Mobilization_CostPerPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Peak_Crew() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Peak_Crew").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7799; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7799; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Peak_Crew", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Peak_CrewMultiplierInstall").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7798; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7798; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Total_Head_Count() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Total_Head_Count").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7817; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7817; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Total_Head_Count", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Total_Mobile_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Crew_Total_Mobile_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7821; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7821; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Total_Mobile_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_Fork_Truck() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Qnty_Fork_Truck").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7858; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7858; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_Fork_Truck", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Qnty_LargeBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7856; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7856; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Qnty_LargeScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7854; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7854; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Qnty_SmallBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7855; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7855; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Qnty_SmallScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7853; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7853; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Qnty_SmallTeleHandle").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7857; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7857; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_TotalCost_Fork_Truck").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7876; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7876; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_TotalCost_LargeBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7874; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7874; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_TotalCost_LargeScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7872; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7872; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_TotalCost_SmallBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7873; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7873; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_TotalCost_SmallScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7871; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7871; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_TotalCost_SmallTeleHandle").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7875; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7875; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_Fork_Truck() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Weeks_Fork_Truck").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7864; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7864; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_Fork_Truck", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Weeks_LargeBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7862; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7862; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Weeks_LargeScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7860; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7860; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Weeks_SmallBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7861; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7861; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Weeks_SmallScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7859; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7859; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_Weeks_SmallTeleHandle").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7863; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7863; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_WklyRate_Fork_Truck").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7870; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7870; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_WklyRate_LargeBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7868; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7868; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_WklyRate_LargeScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7866; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7866; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_WklyRate_SmallBoomLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7867; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7867; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_WklyRate_SmallScissorsLift").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7865; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7865; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_EquipRent_WklyRate_SmallTeleHandle").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7869; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7869; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Factors_Customer_SpecDifficulty() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Factors_Customer_SpecDifficulty").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7788; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7788; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Customer_SpecDifficulty", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Factors_Material_Escalation() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Factors_Material_Escalation").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7789; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7789; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Material_Escalation", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Factors_Risk_Rating() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Factors_Risk_Rating").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7787; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7787; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Risk_Rating", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Count").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7823; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7823; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Price").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7825; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7825; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7827; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7827; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Total() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_HSE_Cost_Total").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7828; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7828; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Total", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Count() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_HSE_Cost_Wages_Count").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7822; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7822; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Count", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Price() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_HSE_Cost_Wages_Price").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7824; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7824; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Price", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_Total() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_HSE_Cost_Wages_Price_Total").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7826; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7826; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Price_Total", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Current_Rate_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7915; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7915; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Current_Rate_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7914; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7914; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_Superintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Current_Rate_Superintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7913; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7913; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_Superintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_New_Rate_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_New_Rate_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7918; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7918; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_New_Rate_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_New_Rate_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7917; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7917; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_New_Rate_Superintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_New_Rate_Superintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7916; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7916; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_Superintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Percent_Adjust_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7912; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7912; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Percent_Adjust_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7911; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7911; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_SI() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Percent_Adjust_SI").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7910; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7910; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_SI", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjustment() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Percent_Adjustment").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7909; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7909; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjustment", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Tot_Cost_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7921; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7921; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Tot_Cost_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7920; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7920; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Tot_Cost_Superintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7919; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7919; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Total_Cost_Adjustment() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_LaborRate_Total_Cost_Adjustment").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7922; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7922; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Total_Cost_Adjustment", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MAT_DeviceMatCost_Conduit_Wireway").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7886; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7886; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Total() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MAT_DeviceMatCost_Total").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7888; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7888; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Total", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Wire() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MAT_DeviceMatCost_Wire").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7887; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7887; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Wire", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7889; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7889; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Total() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Total").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7891; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7891; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Total", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Wire() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Wire").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7890; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7890; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Wire", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Commissioning_Total_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7775; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7775; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Commissioning_Total_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Hours() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Commissioning_Total_Hours").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7767; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7767; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Commissioning_Total_Hours", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Conduit_Cost_Foot() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Conduit_Cost_Foot").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7780; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7780; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Conduit_Cost_Foot", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Devices_Crew() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Devices_Crew").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7764; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7764; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Devices_Crew", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Devices_Foot() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Devices_Foot").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7763; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7763; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Devices_Foot", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_IGS_Support_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_IGS_Support_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7778; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7778; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_IGS_Support_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Install_Hours_Device() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Install_Hours_Device").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7766; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7766; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Install_Hours_Device", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Materials_Cost_Device() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Materials_Cost_Device").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7774; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7774; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Materials_Cost_Device", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Percent_Footage_at_Elevation").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7769; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7769; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Rental_Cost_Week() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Rental_Cost_Week").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7777; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7777; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Rental_Cost_Week", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Rigid_Conduit() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Rigid_Conduit").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7770; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7770; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Rigid_Conduit", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Conduit_Footage() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Total_Conduit_Footage").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7772; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7772; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Conduit_Footage", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Cost_Device() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Total_Cost_Device").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7773; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7773; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Cost_Device", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Devices() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Total_Devices").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7761; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7761; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Devices", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Footage() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Total_Footage").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7762; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7762; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Footage", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Hours_Device() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Total_Hours_Device").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7765; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7765; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Hours_Device", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Stagnant_Hours() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Total_Stagnant_Hours").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7768; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7768; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Stagnant_Hours", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Wire_Footage() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Total_Wire_Footage").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7771; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7771; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Wire_Footage", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Travel_Expense_Resource() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Travel_Expense_Resource").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7776; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7776; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Travel_Expense_Resource", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Wire_Cost_Foot() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Metrics_Wire_Cost_Foot").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7779; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7779; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Wire_Cost_Foot", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_Customer_Spec_Adder").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7840; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7840; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Elevation_Adder() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_Elevation_Adder").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7841; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7841; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Elevation_Adder", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Layout_Inventory() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_Layout_Inventory").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7838; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7838; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Layout_Inventory", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_1() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_Misc_Item_1").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7842; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7842; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Misc_Item_1", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_2() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_Misc_Item_2").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7843; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7843; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Misc_Item_2", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Shuttle() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_Shuttle").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7839; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7839; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Shuttle", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_System_Efficiency() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_System_Efficiency").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7837; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7837; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_System_Efficiency", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Total() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Hours_Total").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7844; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7844; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Total", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Customer_SpecAdder() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_Customer_SpecAdder").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7848; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7848; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Customer_SpecAdder", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Elevation_Adder() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_Elevation_Adder").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7849; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7849; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Elevation_Adder", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Layout_Inventory() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_Layout_Inventory").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7846; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7846; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Layout_Inventory", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_1() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_Misc_Item_1").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7850; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7850; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Misc_Item_1", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_2() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_Misc_Item_2").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7851; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7851; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Misc_Item_2", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Shuttle() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_Shuttle").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7847; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7847; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Shuttle", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_System_Efficiency() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_System_Efficiency").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7845; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7845; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_System_Efficiency", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Total() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Percent_Total").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7852; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7852; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Total", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Customer_Spec_Adder() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_Customer_Spec_Adder").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7832; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7832; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Customer_Spec_Adder", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Elevation_Adder() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_Elevation_Adder").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7833; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7833; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Elevation_Adder", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Layout_Inventory() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_Layout_Inventory").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7830; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7830; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Layout_Inventory", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Misc_Item_1() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_Misc_Item_1").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7834; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7834; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Misc_Item_1", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Misc_Item_2() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_Misc_Item_2").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7835; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7835; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Misc_Item_2", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Shuttle() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_Shuttle").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7831; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7831; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Shuttle", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_System_Efficiency() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_System_Efficiency").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7829; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7829; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_System_Efficiency", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Total() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_MISC_Price_Total").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7836; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7836; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Total", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Duration_Wks() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_OtherCost_Duration_Wks").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7881; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7881; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Duration_Wks", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Hrs_Per_Week() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_OtherCost_Hrs_Per_Week").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7882; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7882; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Hrs_Per_Week", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Onsite_Admin() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_OtherCost_Onsite_Admin").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7880; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7880; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Onsite_Admin", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Permit_Hours() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_OtherCost_Permit_Hours").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7879; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7879; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Permit_Hours", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Qty_Gang_Boxes() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_OtherCost_Qty_Gang_Boxes").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7878; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7878; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Qty_Gang_Boxes", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Qty_Trucks() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_OtherCost_Qty_Trucks").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7877; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7877; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Qty_Trucks", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Installers() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Comm_Installers").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7806; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7806; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Installers", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Comm_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7805; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7805; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Superintndnt() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Comm_Superintndnt").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7804; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7804; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Superintndnt", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Install_Installers() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Install_Installers").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7803; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7803; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Installers", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Install_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Install_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7802; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7802; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Install_Superintndnt() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Install_Superintndnt").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7801; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7801; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Superintndnt", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Working_Installers() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Working_Installers").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7809; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7809; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Installers", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Working_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Working_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7808; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7808; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Working_Superintndnt() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_PeopleNeed_Working_Superintndnt").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7807; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7807; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Superintndnt", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Customer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Project_Info_Customer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7781; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7781; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Customer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Description() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Project_Info_Description").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7784; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7784; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Description", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Location() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Project_Info_Location").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7782; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7782; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Location", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Number() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Project_Info_Number").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7783; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7783; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Number", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Quote_Date() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Project_Info_Quote_Date").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7785; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7785; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Quote_Date", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Tier() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Project_Tier").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7786; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7786; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Tier", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Commissioning() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Schedule_Commissioning").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7795; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7795; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Commissioning", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_End_Commission_Testing() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Schedule_End_Commission_Testing").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7792; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7792; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_End_Commission_Testing", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_End_Elec_Install() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Schedule_End_Elec_Install").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7791; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7791; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_End_Elec_Install", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Install() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Schedule_Install").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7794; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7794; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Install", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Start_Elec_Install() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Schedule_Start_Elec_Install").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7790; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7790; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Start_Elec_Install", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Weeks() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_Schedule_Weeks").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7793; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7793; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Weeks", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_AddSubContractService_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_AddSubContractService_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7741; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7741; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_AddSubContractService_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Administrative_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Administrative_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7743; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7743; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Administrative_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Device_MAT_Conduit_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7732; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7732; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Device_Materials_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7731; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7731; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_Materials_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Device_Materials_Wire_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7733; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7733; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_ECI_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_ECI_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7713; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7713; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_ECI_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_ECI_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_ECI_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7744; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7744; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_ECI_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Equipment_Rental_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7730; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7730; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonCost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_ComisonCost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7728; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7728; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_ComisonCost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonHour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_ComisonHour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7759; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7759; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_ComisonHour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7722; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7722; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7725; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7725; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7756; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7756; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7753; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7753; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Install_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7723; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7723; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Install_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Install_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7754; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7754; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Install_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7726; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7726; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7757; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7757; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7724; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7724; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7755; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7755; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Rate() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Rate").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7712; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7712; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Rate", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_SH_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7727; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7727; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_SH_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_SH_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7758; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7758; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_SH_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7729; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7729; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7760; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7760; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_ComisonCost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7721; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7721; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_ComisonHour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7752; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7752; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7718; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7718; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7749; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7749; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_InstallCost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7719; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7719; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_InstallHour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7750; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7750; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Rate() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_Rate").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7711; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7711; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Rate", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_SH_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7720; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7720; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Lead_Person_SH_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7751; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7751; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Miscellaneous_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Miscellaneous_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7742; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7742; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Miscellaneous_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Permits_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Permits_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7740; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7740; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Permits_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_PF_Materials_Conduit_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7735; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7735; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_PF_Materials_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7734; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7734; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_PF_Materials_Wire_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7736; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7736; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_ComisonCost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7717; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7717; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_ComisonHour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7748; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7748; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7714; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7714; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7745; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7745; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallCost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_InstallCost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7715; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7715; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_InstallCost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallHour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_InstallHour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7746; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7746; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_InstallHour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Rate() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_Rate").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7710; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7710; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Rate", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_SH_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7716; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7716; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Superintendent_SH_Hour").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7747; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7747; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Travel_Expense_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7737; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7737; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7739; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7739; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TotalCosts_Travel_Expense_PerDiemCost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7738; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7738; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_PerDiem_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7896; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7896; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_PerDiem_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7895; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7895; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_PerDiemSuperintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7894; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7894; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_Total_Mob_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7904; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7904; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_Total_Per_Diem").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7900; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7900; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_Total_Travel_Cost").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7908; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7908; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7899; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7899; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7898; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7898; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_SI").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7897; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7897; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7903; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7903; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7902; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7902; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_SI() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_SI").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7901; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7901; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_SI", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7907; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7907; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7906; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7906; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_SI").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7905; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7905; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Per_Diem_Range").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7892; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7892; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Per_Diem_Range", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_Link() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_TravelCost_Per_Diem_Range_Link").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7893; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7893; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Per_Diem_Range_Link", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Current_Rate_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7929; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7929; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Current_Rate_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7928; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7928; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_Superintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Current_Rate_Superintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7927; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7927; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_Superintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_New_Rate_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_New_Rate_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7932; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7932; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_New_Rate_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_New_Rate_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7931; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7931; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_New_Rate_Superintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_New_Rate_Superintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7930; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7930; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_Superintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Percent_Adjust_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7926; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7926; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Percent_Adjust_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7925; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7925; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_SI() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Percent_Adjust_SI").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7924; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7924; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_SI", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjustment() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Percent_Adjustment").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7923; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7923; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjustment", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Tot_Cost_IG_Installer").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7935; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7935; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Tot_Cost_LeadPerson").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7934; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7934; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Tot_Cost_Superintendent").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7933; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7933; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Total_Cost_Adjustment() As Double
          Dim Result as Double
      Dim ctx as Object
      Try
      ctx = this
      If Me.Properties("Elec_Install_UnionRate_Total_Cost_Adjustment").GetDebugState(Rulestream.Kernel.PropertySF.FormulaDebugTypes.VALUE_FORMULA) Then
      Stop
      End If
      '   BEGIN FORMULA; PROP ID:7936; TYPE:PF
      Result = 0.0
      '   END FORMULA; PROP ID:7936; TYPE:PF
      Catch ex As Exception
      ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Total_Cost_Adjustment", ex.Message)
      If ObjectManager.StopOnErrors Then Stop
      End Try
      Return Result
      End Function
    
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_ConvElev_Footage_Conveyor_above_8Feet"
          Me.Properties("Elec_Install_ConvElev_Footage_Conveyor_above_8Feet").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7884; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7884; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_ConvElev_Footage_Conveyor_above_8Feet").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet"
          Me.Properties("Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7883; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7883; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_ConvElev_Footage_Hours_Added_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_ConvElev_Footage_Hours_Added"
          Me.Properties("Elec_Install_ConvElev_Footage_Hours_Added").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7885; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7885; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Hours_Added_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_ConvElev_Footage_Hours_Added").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Average_Crew_Size_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Average_Crew_Size"
          Me.Properties("Elec_Install_Crew_Average_Crew_Size").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7800; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7800; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Average_Crew_Size_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Average_Crew_Size").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Average_Hrs_per_Wk_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Average_Hrs_per_Wk"
          Me.Properties("Elec_Install_Crew_Average_Hrs_per_Wk").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7796; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7796; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Average_Hrs_per_Wk_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Average_Hrs_per_Wk").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk"
          Me.Properties("Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7797; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7797; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Head_Count_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Head_Count_Installer"
          Me.Properties("Elec_Install_Crew_Head_Count_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7816; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7816; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_Count_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Head_Count_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Head_Count_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Head_Count_Lead_Man"
          Me.Properties("Elec_Install_Crew_Head_Count_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7815; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7815; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_Count_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Head_Count_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Head_CountSuperintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Head_CountSuperintendent"
          Me.Properties("Elec_Install_Crew_Head_CountSuperintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7814; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7814; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_CountSuperintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Head_CountSuperintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Mobile_Cost_Installer"
          Me.Properties("Elec_Install_Crew_Mobile_Cost_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7820; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7820; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Mobile_Cost_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Mobile_Cost_Lead_Man"
          Me.Properties("Elec_Install_Crew_Mobile_Cost_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7819; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7819; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Mobile_Cost_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Superintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Mobile_Cost_Superintendent"
          Me.Properties("Elec_Install_Crew_Mobile_Cost_Superintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7818; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7818; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Superintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Mobile_Cost_Superintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Count_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Mobile_Count_Installer"
          Me.Properties("Elec_Install_Crew_Mobile_Count_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7813; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7813; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Count_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Mobile_Count_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_Count_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Mobile_Count_Lead_Man"
          Me.Properties("Elec_Install_Crew_Mobile_Count_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7812; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7812; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Count_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Mobile_Count_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Mobile_CountSuperintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Mobile_CountSuperintendent"
          Me.Properties("Elec_Install_Crew_Mobile_CountSuperintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7811; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7811; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_CountSuperintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Mobile_CountSuperintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_install_Crew_Mobilization_CostPerPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_install_Crew_Mobilization_CostPerPerson"
          Me.Properties("Elec_install_Crew_Mobilization_CostPerPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7810; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7810; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_install_Crew_Mobilization_CostPerPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_install_Crew_Mobilization_CostPerPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Peak_Crew_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Peak_Crew"
          Me.Properties("Elec_Install_Crew_Peak_Crew").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7799; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7799; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Peak_Crew_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Peak_Crew").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Peak_CrewMultiplierInstall"
          Me.Properties("Elec_Install_Crew_Peak_CrewMultiplierInstall").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7798; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7798; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Peak_CrewMultiplierInstall").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Total_Head_Count_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Total_Head_Count"
          Me.Properties("Elec_Install_Crew_Total_Head_Count").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7817; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7817; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Total_Head_Count_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Total_Head_Count").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Crew_Total_Mobile_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Crew_Total_Mobile_Cost"
          Me.Properties("Elec_Install_Crew_Total_Mobile_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7821; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7821; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Total_Mobile_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Crew_Total_Mobile_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_Fork_Truck_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Qnty_Fork_Truck"
          Me.Properties("Elec_Install_EquipRent_Qnty_Fork_Truck").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7858; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7858; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_Fork_Truck_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Qnty_Fork_Truck").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Qnty_LargeBoomLift"
          Me.Properties("Elec_Install_EquipRent_Qnty_LargeBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7856; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7856; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Qnty_LargeBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Qnty_LargeScissorsLift"
          Me.Properties("Elec_Install_EquipRent_Qnty_LargeScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7854; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7854; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Qnty_LargeScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Qnty_SmallBoomLift"
          Me.Properties("Elec_Install_EquipRent_Qnty_SmallBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7855; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7855; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Qnty_SmallBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Qnty_SmallScissorsLift"
          Me.Properties("Elec_Install_EquipRent_Qnty_SmallScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7853; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7853; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Qnty_SmallScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Qnty_SmallTeleHandle"
          Me.Properties("Elec_Install_EquipRent_Qnty_SmallTeleHandle").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7857; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7857; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Qnty_SmallTeleHandle").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_TotalCost_Fork_Truck"
          Me.Properties("Elec_Install_EquipRent_TotalCost_Fork_Truck").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7876; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7876; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_TotalCost_Fork_Truck").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_TotalCost_LargeBoomLift"
          Me.Properties("Elec_Install_EquipRent_TotalCost_LargeBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7874; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7874; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_TotalCost_LargeBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_TotalCost_LargeScissorsLift"
          Me.Properties("Elec_Install_EquipRent_TotalCost_LargeScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7872; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7872; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_TotalCost_LargeScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_TotalCost_SmallBoomLift"
          Me.Properties("Elec_Install_EquipRent_TotalCost_SmallBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7873; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7873; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_TotalCost_SmallBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_TotalCost_SmallScissorsLift"
          Me.Properties("Elec_Install_EquipRent_TotalCost_SmallScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7871; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7871; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_TotalCost_SmallScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_TotalCost_SmallTeleHandle"
          Me.Properties("Elec_Install_EquipRent_TotalCost_SmallTeleHandle").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7875; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7875; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_TotalCost_SmallTeleHandle").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_Fork_Truck_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Weeks_Fork_Truck"
          Me.Properties("Elec_Install_EquipRent_Weeks_Fork_Truck").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7864; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7864; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_Fork_Truck_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Weeks_Fork_Truck").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Weeks_LargeBoomLift"
          Me.Properties("Elec_Install_EquipRent_Weeks_LargeBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7862; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7862; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Weeks_LargeBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Weeks_LargeScissorsLift"
          Me.Properties("Elec_Install_EquipRent_Weeks_LargeScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7860; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7860; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Weeks_LargeScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Weeks_SmallBoomLift"
          Me.Properties("Elec_Install_EquipRent_Weeks_SmallBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7861; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7861; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Weeks_SmallBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Weeks_SmallScissorsLift"
          Me.Properties("Elec_Install_EquipRent_Weeks_SmallScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7859; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7859; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Weeks_SmallScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_Weeks_SmallTeleHandle"
          Me.Properties("Elec_Install_EquipRent_Weeks_SmallTeleHandle").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7863; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7863; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_Weeks_SmallTeleHandle").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_WklyRate_Fork_Truck"
          Me.Properties("Elec_Install_EquipRent_WklyRate_Fork_Truck").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7870; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7870; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_WklyRate_Fork_Truck").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_WklyRate_LargeBoomLift"
          Me.Properties("Elec_Install_EquipRent_WklyRate_LargeBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7868; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7868; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_WklyRate_LargeBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_WklyRate_LargeScissorsLift"
          Me.Properties("Elec_Install_EquipRent_WklyRate_LargeScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7866; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7866; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_WklyRate_LargeScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_WklyRate_SmallBoomLift"
          Me.Properties("Elec_Install_EquipRent_WklyRate_SmallBoomLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7867; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7867; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_WklyRate_SmallBoomLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_WklyRate_SmallScissorsLift"
          Me.Properties("Elec_Install_EquipRent_WklyRate_SmallScissorsLift").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7865; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7865; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_WklyRate_SmallScissorsLift").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_EquipRent_WklyRate_SmallTeleHandle"
          Me.Properties("Elec_Install_EquipRent_WklyRate_SmallTeleHandle").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7869; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7869; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_EquipRent_WklyRate_SmallTeleHandle").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Factors_Customer_SpecDifficulty_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Factors_Customer_SpecDifficulty"
          Me.Properties("Elec_Install_Factors_Customer_SpecDifficulty").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7788; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7788; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Customer_SpecDifficulty_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Factors_Customer_SpecDifficulty").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Factors_Material_Escalation_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Factors_Material_Escalation"
          Me.Properties("Elec_Install_Factors_Material_Escalation").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7789; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7789; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Material_Escalation_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Factors_Material_Escalation").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Factors_Risk_Rating_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Factors_Risk_Rating"
          Me.Properties("Elec_Install_Factors_Risk_Rating").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7787; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7787; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Risk_Rating_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Factors_Risk_Rating").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_HSE_Cost_Per_Diem_Rate_Count"
          Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Count").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7823; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7823; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Count").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_HSE_Cost_Per_Diem_Rate_Price"
          Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Price").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7825; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7825; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_Price").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot"
          Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7827; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7827; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Total_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_HSE_Cost_Total"
          Me.Properties("Elec_Install_HSE_Cost_Total").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7828; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7828; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Total_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_HSE_Cost_Total").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Count_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_HSE_Cost_Wages_Count"
          Me.Properties("Elec_Install_HSE_Cost_Wages_Count").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7822; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7822; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Count_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_HSE_Cost_Wages_Count").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_HSE_Cost_Wages_Price"
          Me.Properties("Elec_Install_HSE_Cost_Wages_Price").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7824; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7824; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Price_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_HSE_Cost_Wages_Price").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_Total_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_HSE_Cost_Wages_Price_Total"
          Me.Properties("Elec_Install_HSE_Cost_Wages_Price_Total").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7826; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7826; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Price_Total_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_HSE_Cost_Wages_Price_Total").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Current_Rate_IG_Installer"
          Me.Properties("Elec_Install_LaborRate_Current_Rate_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7915; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7915; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Current_Rate_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Current_Rate_LeadPerson"
          Me.Properties("Elec_Install_LaborRate_Current_Rate_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7914; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7914; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Current_Rate_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_Superintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Current_Rate_Superintendent"
          Me.Properties("Elec_Install_LaborRate_Current_Rate_Superintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7913; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7913; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_Superintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Current_Rate_Superintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_New_Rate_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_New_Rate_IG_Installer"
          Me.Properties("Elec_Install_LaborRate_New_Rate_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7918; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7918; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_New_Rate_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_New_Rate_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_New_Rate_LeadPerson"
          Me.Properties("Elec_Install_LaborRate_New_Rate_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7917; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7917; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_New_Rate_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_New_Rate_Superintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_New_Rate_Superintendent"
          Me.Properties("Elec_Install_LaborRate_New_Rate_Superintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7916; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7916; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_Superintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_New_Rate_Superintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Percent_Adjust_IG_Installer"
          Me.Properties("Elec_Install_LaborRate_Percent_Adjust_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7912; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7912; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Percent_Adjust_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Percent_Adjust_LeadPerson"
          Me.Properties("Elec_Install_LaborRate_Percent_Adjust_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7911; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7911; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Percent_Adjust_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_SI_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Percent_Adjust_SI"
          Me.Properties("Elec_Install_LaborRate_Percent_Adjust_SI").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7910; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7910; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_SI_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Percent_Adjust_SI").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjustment_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Percent_Adjustment"
          Me.Properties("Elec_Install_LaborRate_Percent_Adjustment").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7909; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7909; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjustment_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Percent_Adjustment").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Tot_Cost_IG_Installer"
          Me.Properties("Elec_Install_LaborRate_Tot_Cost_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7921; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7921; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Tot_Cost_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Tot_Cost_LeadPerson"
          Me.Properties("Elec_Install_LaborRate_Tot_Cost_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7920; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7920; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Tot_Cost_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Tot_Cost_Superintendent"
          Me.Properties("Elec_Install_LaborRate_Tot_Cost_Superintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7919; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7919; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Tot_Cost_Superintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_LaborRate_Total_Cost_Adjustment_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_LaborRate_Total_Cost_Adjustment"
          Me.Properties("Elec_Install_LaborRate_Total_Cost_Adjustment").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7922; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7922; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Total_Cost_Adjustment_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_LaborRate_Total_Cost_Adjustment").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MAT_DeviceMatCost_Conduit_Wireway"
          Me.Properties("Elec_Install_MAT_DeviceMatCost_Conduit_Wireway").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7886; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7886; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MAT_DeviceMatCost_Conduit_Wireway").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Total_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MAT_DeviceMatCost_Total"
          Me.Properties("Elec_Install_MAT_DeviceMatCost_Total").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7888; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7888; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Total_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MAT_DeviceMatCost_Total").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Wire_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MAT_DeviceMatCost_Wire"
          Me.Properties("Elec_Install_MAT_DeviceMatCost_Wire").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7887; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7887; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Wire_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MAT_DeviceMatCost_Wire").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway"
          Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7889; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7889; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Total_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MAT_PowerFeedMatCost_Total"
          Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Total").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7891; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7891; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Total_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Total").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Wire_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MAT_PowerFeedMatCost_Wire"
          Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Wire").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7890; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7890; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Wire_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MAT_PowerFeedMatCost_Wire").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Commissioning_Total_Cost"
          Me.Properties("Elec_Install_Metrics_Commissioning_Total_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7775; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7775; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Commissioning_Total_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Commissioning_Total_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Hours_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Commissioning_Total_Hours"
          Me.Properties("Elec_Install_Metrics_Commissioning_Total_Hours").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7767; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7767; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Commissioning_Total_Hours_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Commissioning_Total_Hours").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Conduit_Cost_Foot_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Conduit_Cost_Foot"
          Me.Properties("Elec_Install_Metrics_Conduit_Cost_Foot").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7780; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7780; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Conduit_Cost_Foot_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Conduit_Cost_Foot").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Devices_Crew_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Devices_Crew"
          Me.Properties("Elec_Install_Metrics_Devices_Crew").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7764; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7764; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Devices_Crew_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Devices_Crew").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Devices_Foot_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Devices_Foot"
          Me.Properties("Elec_Install_Metrics_Devices_Foot").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7763; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7763; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Devices_Foot_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Devices_Foot").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_IGS_Support_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_IGS_Support_Cost"
          Me.Properties("Elec_Install_Metrics_IGS_Support_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7778; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7778; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_IGS_Support_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_IGS_Support_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Install_Hours_Device_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Install_Hours_Device"
          Me.Properties("Elec_Install_Metrics_Install_Hours_Device").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7766; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7766; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Install_Hours_Device_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Install_Hours_Device").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Materials_Cost_Device_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Materials_Cost_Device"
          Me.Properties("Elec_Install_Metrics_Materials_Cost_Device").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7774; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7774; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Materials_Cost_Device_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Materials_Cost_Device").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Percent_Footage_at_Elevation"
          Me.Properties("Elec_Install_Metrics_Percent_Footage_at_Elevation").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7769; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7769; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Percent_Footage_at_Elevation").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Rental_Cost_Week_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Rental_Cost_Week"
          Me.Properties("Elec_Install_Metrics_Rental_Cost_Week").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7777; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7777; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Rental_Cost_Week_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Rental_Cost_Week").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Rigid_Conduit_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Rigid_Conduit"
          Me.Properties("Elec_Install_Metrics_Rigid_Conduit").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7770; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7770; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Rigid_Conduit_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Rigid_Conduit").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Conduit_Footage_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Total_Conduit_Footage"
          Me.Properties("Elec_Install_Metrics_Total_Conduit_Footage").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7772; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7772; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Conduit_Footage_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Total_Conduit_Footage").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Cost_Device_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Total_Cost_Device"
          Me.Properties("Elec_Install_Metrics_Total_Cost_Device").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7773; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7773; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Cost_Device_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Total_Cost_Device").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Devices_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Total_Devices"
          Me.Properties("Elec_Install_Metrics_Total_Devices").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7761; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7761; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Devices_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Total_Devices").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Footage_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Total_Footage"
          Me.Properties("Elec_Install_Metrics_Total_Footage").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7762; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7762; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Footage_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Total_Footage").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Hours_Device_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Total_Hours_Device"
          Me.Properties("Elec_Install_Metrics_Total_Hours_Device").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7765; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7765; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Hours_Device_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Total_Hours_Device").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Stagnant_Hours_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Total_Stagnant_Hours"
          Me.Properties("Elec_Install_Metrics_Total_Stagnant_Hours").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7768; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7768; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Stagnant_Hours_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Total_Stagnant_Hours").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Total_Wire_Footage_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Total_Wire_Footage"
          Me.Properties("Elec_Install_Metrics_Total_Wire_Footage").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7771; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7771; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Wire_Footage_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Total_Wire_Footage").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Travel_Expense_Resource_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Travel_Expense_Resource"
          Me.Properties("Elec_Install_Metrics_Travel_Expense_Resource").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7776; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7776; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Travel_Expense_Resource_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Travel_Expense_Resource").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Metrics_Wire_Cost_Foot_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Metrics_Wire_Cost_Foot"
          Me.Properties("Elec_Install_Metrics_Wire_Cost_Foot").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7779; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7779; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Wire_Cost_Foot_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Metrics_Wire_Cost_Foot").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_Customer_Spec_Adder"
          Me.Properties("Elec_Install_MISC_Hours_Customer_Spec_Adder").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7840; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7840; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_Customer_Spec_Adder").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Elevation_Adder_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_Elevation_Adder"
          Me.Properties("Elec_Install_MISC_Hours_Elevation_Adder").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7841; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7841; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Elevation_Adder_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_Elevation_Adder").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Layout_Inventory_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_Layout_Inventory"
          Me.Properties("Elec_Install_MISC_Hours_Layout_Inventory").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7838; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7838; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Layout_Inventory_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_Layout_Inventory").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_1_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_Misc_Item_1"
          Me.Properties("Elec_Install_MISC_Hours_Misc_Item_1").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7842; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7842; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Misc_Item_1_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_Misc_Item_1").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_2_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_Misc_Item_2"
          Me.Properties("Elec_Install_MISC_Hours_Misc_Item_2").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7843; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7843; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Misc_Item_2_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_Misc_Item_2").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Shuttle_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_Shuttle"
          Me.Properties("Elec_Install_MISC_Hours_Shuttle").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7839; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7839; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Shuttle_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_Shuttle").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_System_Efficiency_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_System_Efficiency"
          Me.Properties("Elec_Install_MISC_Hours_System_Efficiency").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7837; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7837; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_System_Efficiency_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_System_Efficiency").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Hours_Total_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Hours_Total"
          Me.Properties("Elec_Install_MISC_Hours_Total").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7844; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7844; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Total_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Hours_Total").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Customer_SpecAdder_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_Customer_SpecAdder"
          Me.Properties("Elec_Install_MISC_Percent_Customer_SpecAdder").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7848; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7848; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Customer_SpecAdder_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_Customer_SpecAdder").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Elevation_Adder_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_Elevation_Adder"
          Me.Properties("Elec_Install_MISC_Percent_Elevation_Adder").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7849; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7849; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Elevation_Adder_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_Elevation_Adder").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Layout_Inventory_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_Layout_Inventory"
          Me.Properties("Elec_Install_MISC_Percent_Layout_Inventory").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7846; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7846; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Layout_Inventory_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_Layout_Inventory").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_1_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_Misc_Item_1"
          Me.Properties("Elec_Install_MISC_Percent_Misc_Item_1").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7850; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7850; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Misc_Item_1_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_Misc_Item_1").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_2_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_Misc_Item_2"
          Me.Properties("Elec_Install_MISC_Percent_Misc_Item_2").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7851; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7851; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Misc_Item_2_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_Misc_Item_2").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Shuttle_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_Shuttle"
          Me.Properties("Elec_Install_MISC_Percent_Shuttle").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7847; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7847; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Shuttle_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_Shuttle").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_System_Efficiency_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_System_Efficiency"
          Me.Properties("Elec_Install_MISC_Percent_System_Efficiency").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7845; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7845; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_System_Efficiency_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_System_Efficiency").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Percent_Total_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Percent_Total"
          Me.Properties("Elec_Install_MISC_Percent_Total").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7852; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7852; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Total_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Percent_Total").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Customer_Spec_Adder_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_Customer_Spec_Adder"
          Me.Properties("Elec_Install_MISC_Price_Customer_Spec_Adder").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7832; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7832; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Customer_Spec_Adder_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_Customer_Spec_Adder").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Elevation_Adder_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_Elevation_Adder"
          Me.Properties("Elec_Install_MISC_Price_Elevation_Adder").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7833; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7833; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Elevation_Adder_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_Elevation_Adder").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Layout_Inventory_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_Layout_Inventory"
          Me.Properties("Elec_Install_MISC_Price_Layout_Inventory").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7830; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7830; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Layout_Inventory_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_Layout_Inventory").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Misc_Item_1_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_Misc_Item_1"
          Me.Properties("Elec_Install_MISC_Price_Misc_Item_1").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7834; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7834; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Misc_Item_1_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_Misc_Item_1").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Misc_Item_2_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_Misc_Item_2"
          Me.Properties("Elec_Install_MISC_Price_Misc_Item_2").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7835; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7835; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Misc_Item_2_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_Misc_Item_2").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Shuttle_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_Shuttle"
          Me.Properties("Elec_Install_MISC_Price_Shuttle").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7831; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7831; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Shuttle_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_Shuttle").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_System_Efficiency_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_System_Efficiency"
          Me.Properties("Elec_Install_MISC_Price_System_Efficiency").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7829; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7829; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_System_Efficiency_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_System_Efficiency").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_MISC_Price_Total_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_MISC_Price_Total"
          Me.Properties("Elec_Install_MISC_Price_Total").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7836; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7836; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Total_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_MISC_Price_Total").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Duration_Wks_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_OtherCost_Duration_Wks"
          Me.Properties("Elec_Install_OtherCost_Duration_Wks").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7881; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7881; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Duration_Wks_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_OtherCost_Duration_Wks").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Hrs_Per_Week_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_OtherCost_Hrs_Per_Week"
          Me.Properties("Elec_Install_OtherCost_Hrs_Per_Week").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7882; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7882; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Hrs_Per_Week_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_OtherCost_Hrs_Per_Week").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Onsite_Admin_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_OtherCost_Onsite_Admin"
          Me.Properties("Elec_Install_OtherCost_Onsite_Admin").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7880; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7880; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Onsite_Admin_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_OtherCost_Onsite_Admin").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Permit_Hours_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_OtherCost_Permit_Hours"
          Me.Properties("Elec_Install_OtherCost_Permit_Hours").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7879; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7879; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Permit_Hours_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_OtherCost_Permit_Hours").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Qty_Gang_Boxes_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_OtherCost_Qty_Gang_Boxes"
          Me.Properties("Elec_Install_OtherCost_Qty_Gang_Boxes").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7878; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7878; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Qty_Gang_Boxes_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_OtherCost_Qty_Gang_Boxes").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_OtherCost_Qty_Trucks_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_OtherCost_Qty_Trucks"
          Me.Properties("Elec_Install_OtherCost_Qty_Trucks").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7877; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7877; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Qty_Trucks_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_OtherCost_Qty_Trucks").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Installers_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Comm_Installers"
          Me.Properties("Elec_Install_PeopleNeed_Comm_Installers").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7806; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7806; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Installers_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Comm_Installers").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Comm_Lead_Man"
          Me.Properties("Elec_Install_PeopleNeed_Comm_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7805; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7805; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Comm_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Superintndnt_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Comm_Superintndnt"
          Me.Properties("Elec_Install_PeopleNeed_Comm_Superintndnt").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7804; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7804; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Superintndnt_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Comm_Superintndnt").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Install_Installers_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Install_Installers"
          Me.Properties("Elec_Install_PeopleNeed_Install_Installers").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7803; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7803; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Installers_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Install_Installers").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Install_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Install_Lead_Man"
          Me.Properties("Elec_Install_PeopleNeed_Install_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7802; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7802; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Install_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Install_Superintndnt_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Install_Superintndnt"
          Me.Properties("Elec_Install_PeopleNeed_Install_Superintndnt").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7801; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7801; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Superintndnt_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Install_Superintndnt").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Working_Installers_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Working_Installers"
          Me.Properties("Elec_Install_PeopleNeed_Working_Installers").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7809; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7809; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Installers_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Working_Installers").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Working_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Working_Lead_Man"
          Me.Properties("Elec_Install_PeopleNeed_Working_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7808; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7808; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Working_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_PeopleNeed_Working_Superintndnt_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_PeopleNeed_Working_Superintndnt"
          Me.Properties("Elec_Install_PeopleNeed_Working_Superintndnt").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7807; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7807; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Superintndnt_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_PeopleNeed_Working_Superintndnt").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Customer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Project_Info_Customer"
          Me.Properties("Elec_Install_Project_Info_Customer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7781; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7781; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Customer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Project_Info_Customer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Description_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Project_Info_Description"
          Me.Properties("Elec_Install_Project_Info_Description").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7784; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7784; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Description_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Project_Info_Description").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Location_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Project_Info_Location"
          Me.Properties("Elec_Install_Project_Info_Location").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7782; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7782; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Location_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Project_Info_Location").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Number_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Project_Info_Number"
          Me.Properties("Elec_Install_Project_Info_Number").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7783; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7783; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Number_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Project_Info_Number").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Info_Quote_Date_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Project_Info_Quote_Date"
          Me.Properties("Elec_Install_Project_Info_Quote_Date").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7785; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7785; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Quote_Date_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Project_Info_Quote_Date").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Project_Tier_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Project_Tier"
          Me.Properties("Elec_Install_Project_Tier").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7786; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7786; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Tier_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Project_Tier").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Commissioning_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Schedule_Commissioning"
          Me.Properties("Elec_Install_Schedule_Commissioning").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7795; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7795; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Commissioning_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Schedule_Commissioning").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_End_Commission_Testing_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Schedule_End_Commission_Testing"
          Me.Properties("Elec_Install_Schedule_End_Commission_Testing").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7792; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7792; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_End_Commission_Testing_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Schedule_End_Commission_Testing").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_End_Elec_Install_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Schedule_End_Elec_Install"
          Me.Properties("Elec_Install_Schedule_End_Elec_Install").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7791; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7791; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_End_Elec_Install_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Schedule_End_Elec_Install").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Install_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Schedule_Install"
          Me.Properties("Elec_Install_Schedule_Install").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7794; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7794; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Install_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Schedule_Install").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Start_Elec_Install_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Schedule_Start_Elec_Install"
          Me.Properties("Elec_Install_Schedule_Start_Elec_Install").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7790; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7790; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Start_Elec_Install_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Schedule_Start_Elec_Install").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_Schedule_Weeks_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_Schedule_Weeks"
          Me.Properties("Elec_Install_Schedule_Weeks").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7793; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7793; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Weeks_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_Schedule_Weeks").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_AddSubContractService_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_AddSubContractService_Cost"
          Me.Properties("Elec_Install_TotalCosts_AddSubContractService_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7741; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7741; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_AddSubContractService_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_AddSubContractService_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Administrative_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Administrative_Cost"
          Me.Properties("Elec_Install_TotalCosts_Administrative_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7743; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7743; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Administrative_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Administrative_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Device_MAT_Conduit_Cost"
          Me.Properties("Elec_Install_TotalCosts_Device_MAT_Conduit_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7732; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7732; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Device_MAT_Conduit_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Device_Materials_Cost"
          Me.Properties("Elec_Install_TotalCosts_Device_Materials_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7731; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7731; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_Materials_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Device_Materials_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Device_Materials_Wire_Cost"
          Me.Properties("Elec_Install_TotalCosts_Device_Materials_Wire_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7733; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7733; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Device_Materials_Wire_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_ECI_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_ECI_Cost"
          Me.Properties("Elec_Install_TotalCosts_ECI_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7713; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7713; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_ECI_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_ECI_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_ECI_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_ECI_Hour"
          Me.Properties("Elec_Install_TotalCosts_ECI_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7744; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7744; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_ECI_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_ECI_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Equipment_Rental_Cost"
          Me.Properties("Elec_Install_TotalCosts_Equipment_Rental_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7730; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7730; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Equipment_Rental_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonCost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_ComisonCost"
          Me.Properties("Elec_Install_TotalCosts_Installer_ComisonCost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7728; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7728; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_ComisonCost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_ComisonCost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonHour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_ComisonHour"
          Me.Properties("Elec_Install_TotalCosts_Installer_ComisonHour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7759; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7759; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_ComisonHour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_ComisonHour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Cost"
          Me.Properties("Elec_Install_TotalCosts_Installer_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7722; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7722; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Demo_Panel_Cost"
          Me.Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7725; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7725; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Demo_Panel_Hour"
          Me.Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7756; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7756; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Demo_Panel_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Hour"
          Me.Properties("Elec_Install_TotalCosts_Installer_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7753; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7753; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Install_Cost"
          Me.Properties("Elec_Install_TotalCosts_Installer_Install_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7723; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7723; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Install_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Install_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Install_Hour"
          Me.Properties("Elec_Install_TotalCosts_Installer_Install_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7754; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7754; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Install_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Install_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_MiscInstall_Cost"
          Me.Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7726; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7726; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_MiscInstall_Hour"
          Me.Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7757; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7757; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_MiscInstall_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_PF_Labor_Cost"
          Me.Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7724; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7724; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_PF_Labor_Hour"
          Me.Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7755; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7755; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_PF_Labor_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Rate_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Rate"
          Me.Properties("Elec_Install_TotalCosts_Installer_Rate").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7712; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7712; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Rate_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Rate").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_SH_Cost"
          Me.Properties("Elec_Install_TotalCosts_Installer_SH_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7727; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7727; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_SH_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_SH_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_SH_Hour"
          Me.Properties("Elec_Install_TotalCosts_Installer_SH_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7758; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7758; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_SH_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_SH_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Working_SLD_Cost"
          Me.Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7729; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7729; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Installer_Working_SLD_Hour"
          Me.Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7760; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7760; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Installer_Working_SLD_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_ComisonCost"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_ComisonCost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7721; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7721; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_ComisonCost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_ComisonHour"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_ComisonHour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7752; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7752; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_ComisonHour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_Cost"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7718; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7718; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_Hour"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7749; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7749; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_InstallCost"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_InstallCost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7719; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7719; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_InstallCost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_InstallHour"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_InstallHour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7750; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7750; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_InstallHour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Rate_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_Rate"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_Rate").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7711; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7711; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Rate_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_Rate").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_SH_Cost"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_SH_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7720; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7720; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_SH_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Lead_Person_SH_Hour"
          Me.Properties("Elec_Install_TotalCosts_Lead_Person_SH_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7751; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7751; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Lead_Person_SH_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Miscellaneous_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Miscellaneous_Cost"
          Me.Properties("Elec_Install_TotalCosts_Miscellaneous_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7742; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7742; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Miscellaneous_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Miscellaneous_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Permits_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Permits_Cost"
          Me.Properties("Elec_Install_TotalCosts_Permits_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7740; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7740; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Permits_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Permits_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_PF_Materials_Conduit_Cost"
          Me.Properties("Elec_Install_TotalCosts_PF_Materials_Conduit_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7735; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7735; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_PF_Materials_Conduit_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_PF_Materials_Cost"
          Me.Properties("Elec_Install_TotalCosts_PF_Materials_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7734; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7734; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_PF_Materials_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_PF_Materials_Wire_Cost"
          Me.Properties("Elec_Install_TotalCosts_PF_Materials_Wire_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7736; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7736; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_PF_Materials_Wire_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_ComisonCost"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_ComisonCost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7717; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7717; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_ComisonCost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_ComisonHour"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_ComisonHour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7748; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7748; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_ComisonHour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_Cost"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7714; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7714; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_Hour"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7745; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7745; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallCost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_InstallCost"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_InstallCost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7715; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7715; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_InstallCost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_InstallCost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallHour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_InstallHour"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_InstallHour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7746; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7746; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_InstallHour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_InstallHour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Rate_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_Rate"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_Rate").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7710; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7710; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Rate_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_Rate").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_SH_Cost"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_SH_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7716; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7716; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_SH_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Superintendent_SH_Hour"
          Me.Properties("Elec_Install_TotalCosts_Superintendent_SH_Hour").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7747; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7747; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Superintendent_SH_Hour").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Travel_Expense_Cost"
          Me.Properties("Elec_Install_TotalCosts_Travel_Expense_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7737; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7737; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Travel_Expense_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost"
          Me.Properties("Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7739; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7739; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TotalCosts_Travel_Expense_PerDiemCost"
          Me.Properties("Elec_Install_TotalCosts_Travel_Expense_PerDiemCost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7738; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7738; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TotalCosts_Travel_Expense_PerDiemCost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_PerDiem_Installer"
          Me.Properties("Elec_Install_TravelCost_Crew_PerDiem_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7896; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7896; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_PerDiem_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_PerDiem_Lead_Man"
          Me.Properties("Elec_Install_TravelCost_Crew_PerDiem_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7895; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7895; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_PerDiem_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_PerDiemSuperintendent"
          Me.Properties("Elec_Install_TravelCost_Crew_PerDiemSuperintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7894; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7894; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_PerDiemSuperintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_Total_Mob_Cost"
          Me.Properties("Elec_Install_TravelCost_Crew_Total_Mob_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7904; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7904; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_Total_Mob_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_Total_Per_Diem"
          Me.Properties("Elec_Install_TravelCost_Crew_Total_Per_Diem").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7900; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7900; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_Total_Per_Diem").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_Total_Travel_Cost"
          Me.Properties("Elec_Install_TravelCost_Crew_Total_Travel_Cost").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7908; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7908; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_Total_Travel_Cost").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalDiem_Installer"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7899; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7899; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7898; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7898; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalDiem_SI"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_SI").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7897; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7897; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalDiem_SI").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalMob_Installer"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7903; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7903; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalMob_Lead_Man"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7902; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7902; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_SI_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalMob_SI"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_SI").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7901; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7901; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_SI_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalMob_SI").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalTravel_Installer"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7907; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7907; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7906; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7906; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Crew_TotalTravel_SI"
          Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_SI").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7905; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7905; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Crew_TotalTravel_SI").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Per_Diem_Range"
          Me.Properties("Elec_Install_TravelCost_Per_Diem_Range").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7892; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7892; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Per_Diem_Range_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Per_Diem_Range").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_Link_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_TravelCost_Per_Diem_Range_Link"
          Me.Properties("Elec_Install_TravelCost_Per_Diem_Range_Link").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7893; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7893; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Per_Diem_Range_Link_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_TravelCost_Per_Diem_Range_Link").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Current_Rate_IG_Installer"
          Me.Properties("Elec_Install_UnionRate_Current_Rate_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7929; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7929; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Current_Rate_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Current_Rate_LeadPerson"
          Me.Properties("Elec_Install_UnionRate_Current_Rate_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7928; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7928; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Current_Rate_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_Superintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Current_Rate_Superintendent"
          Me.Properties("Elec_Install_UnionRate_Current_Rate_Superintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7927; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7927; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_Superintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Current_Rate_Superintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_New_Rate_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_New_Rate_IG_Installer"
          Me.Properties("Elec_Install_UnionRate_New_Rate_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7932; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7932; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_New_Rate_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_New_Rate_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_New_Rate_LeadPerson"
          Me.Properties("Elec_Install_UnionRate_New_Rate_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7931; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7931; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_New_Rate_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_New_Rate_Superintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_New_Rate_Superintendent"
          Me.Properties("Elec_Install_UnionRate_New_Rate_Superintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7930; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7930; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_Superintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_New_Rate_Superintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Percent_Adjust_IG_Installer"
          Me.Properties("Elec_Install_UnionRate_Percent_Adjust_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7926; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7926; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Percent_Adjust_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Percent_Adjust_LeadPerson"
          Me.Properties("Elec_Install_UnionRate_Percent_Adjust_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7925; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7925; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Percent_Adjust_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_SI_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Percent_Adjust_SI"
          Me.Properties("Elec_Install_UnionRate_Percent_Adjust_SI").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7924; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7924; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_SI_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Percent_Adjust_SI").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjustment_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Percent_Adjustment"
          Me.Properties("Elec_Install_UnionRate_Percent_Adjustment").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7923; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7923; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjustment_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Percent_Adjustment").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Tot_Cost_IG_Installer"
          Me.Properties("Elec_Install_UnionRate_Tot_Cost_IG_Installer").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7935; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7935; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Tot_Cost_IG_Installer").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Tot_Cost_LeadPerson"
          Me.Properties("Elec_Install_UnionRate_Tot_Cost_LeadPerson").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7934; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7934; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Tot_Cost_LeadPerson").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Tot_Cost_Superintendent"
          Me.Properties("Elec_Install_UnionRate_Tot_Cost_Superintendent").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7933; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7933; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Tot_Cost_Superintendent").ErrorReporting
          End Function
        
          '*****************************************************************************
          '   Copyright (C) 2024 Siemens. All rights reserved.
          '
          '   Changes to this procedure may only be made within formula comment blocks.
          '*****************************************************************************
          Public Function Formula_Elec_Install_UnionRate_Total_Cost_Adjustment_CustomCheck() as Object
          
          Dim Result as Object
          Dim ctx as Object
          Dim PropertyName As String
          PropertyName = "Elec_Install_UnionRate_Total_Cost_Adjustment"
          Me.Properties("Elec_Install_UnionRate_Total_Cost_Adjustment").ClearCustomErrors()
          Try
          ctx = this
              '   BEGIN FORMULA; PROP ID:7936; TYPE:CC
              'Dim MyProp As PropertySF = Me.Properties("Replace Your Property Name")
'Choices For Severity ARE: VIA_ERROR, VIA_WARNING
'If MyProp.IsInvalid() Then 
' RS_CustomReportError(Me, PropertyName, VIA_ERROR/VIA_WARNING, "Replace Your Error Message")
'End If
              '   END FORMULA; PROP ID:7936; TYPE:CC
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Total_Cost_Adjustment_CustomCheck", ex.Message)
          If ObjectManager.StopOnErrors Then Stop
          End Try
          Return Me.Properties("Elec_Install_UnionRate_Total_Cost_Adjustment").ErrorReporting
          End Function
        
          Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_ConvElev_Footage_Hours_Added_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_ConvElev_Footage_Hours_Added_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Average_Crew_Size_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Average_Crew_Size_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Average_Hrs_per_Wk_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Average_Hrs_per_Wk_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Head_Count_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_Count_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Head_Count_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_Count_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Head_CountSuperintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Head_CountSuperintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Mobile_Cost_Superintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Cost_Superintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Mobile_Count_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Count_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Mobile_Count_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_Count_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Mobile_CountSuperintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Mobile_CountSuperintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_install_Crew_Mobilization_CostPerPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_install_Crew_Mobilization_CostPerPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Peak_Crew_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Peak_Crew_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Total_Head_Count_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Total_Head_Count_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Crew_Total_Mobile_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Crew_Total_Mobile_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Qnty_Fork_Truck_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_Fork_Truck_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Weeks_Fork_Truck_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_Fork_Truck_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Factors_Customer_SpecDifficulty_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Customer_SpecDifficulty_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Factors_Material_Escalation_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Material_Escalation_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Factors_Risk_Rating_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Factors_Risk_Rating_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_HSE_Cost_Total_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Total_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Count_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Count_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Price_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_Total_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_HSE_Cost_Wages_Price_Total_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Current_Rate_Superintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Current_Rate_Superintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_New_Rate_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_New_Rate_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_New_Rate_Superintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_New_Rate_Superintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_SI_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjust_SI_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Percent_Adjustment_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Percent_Adjustment_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_LaborRate_Total_Cost_Adjustment_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_LaborRate_Total_Cost_Adjustment_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Total_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Total_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MAT_DeviceMatCost_Wire_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_DeviceMatCost_Wire_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Total_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Total_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Wire_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MAT_PowerFeedMatCost_Wire_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Commissioning_Total_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Hours_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Commissioning_Total_Hours_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Conduit_Cost_Foot_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Conduit_Cost_Foot_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Devices_Crew_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Devices_Crew_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Devices_Foot_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Devices_Foot_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_IGS_Support_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_IGS_Support_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Install_Hours_Device_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Install_Hours_Device_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Materials_Cost_Device_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Materials_Cost_Device_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Rental_Cost_Week_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Rental_Cost_Week_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Rigid_Conduit_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Rigid_Conduit_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Total_Conduit_Footage_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Conduit_Footage_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Total_Cost_Device_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Cost_Device_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Total_Devices_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Devices_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Total_Footage_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Footage_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Total_Hours_Device_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Hours_Device_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Total_Stagnant_Hours_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Stagnant_Hours_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Total_Wire_Footage_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Total_Wire_Footage_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Travel_Expense_Resource_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Travel_Expense_Resource_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Metrics_Wire_Cost_Foot_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Metrics_Wire_Cost_Foot_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_Elevation_Adder_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Elevation_Adder_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_Layout_Inventory_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Layout_Inventory_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_1_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Misc_Item_1_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_2_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Misc_Item_2_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_Shuttle_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Shuttle_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_System_Efficiency_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_System_Efficiency_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Hours_Total_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Hours_Total_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_Customer_SpecAdder_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Customer_SpecAdder_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_Elevation_Adder_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Elevation_Adder_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_Layout_Inventory_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Layout_Inventory_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_1_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Misc_Item_1_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_2_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Misc_Item_2_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_Shuttle_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Shuttle_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_System_Efficiency_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_System_Efficiency_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Percent_Total_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Percent_Total_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_Customer_Spec_Adder_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Customer_Spec_Adder_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_Elevation_Adder_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Elevation_Adder_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_Layout_Inventory_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Layout_Inventory_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_Misc_Item_1_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Misc_Item_1_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_Misc_Item_2_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Misc_Item_2_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_Shuttle_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Shuttle_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_System_Efficiency_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_System_Efficiency_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_MISC_Price_Total_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_MISC_Price_Total_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_OtherCost_Duration_Wks_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Duration_Wks_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_OtherCost_Hrs_Per_Week_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Hrs_Per_Week_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_OtherCost_Onsite_Admin_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Onsite_Admin_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_OtherCost_Permit_Hours_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Permit_Hours_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_OtherCost_Qty_Gang_Boxes_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Qty_Gang_Boxes_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_OtherCost_Qty_Trucks_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_OtherCost_Qty_Trucks_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Installers_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Installers_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Comm_Superintndnt_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Comm_Superintndnt_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Install_Installers_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Installers_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Install_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Install_Superintndnt_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Install_Superintndnt_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Working_Installers_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Installers_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Working_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_PeopleNeed_Working_Superintndnt_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_PeopleNeed_Working_Superintndnt_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Project_Info_Customer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Customer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Project_Info_Description_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Description_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Project_Info_Location_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Location_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Project_Info_Number_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Number_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Project_Info_Quote_Date_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Info_Quote_Date_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Project_Tier_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Project_Tier_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Schedule_Commissioning_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Commissioning_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Schedule_End_Commission_Testing_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_End_Commission_Testing_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Schedule_End_Elec_Install_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_End_Elec_Install_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Schedule_Install_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Install_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Schedule_Start_Elec_Install_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Start_Elec_Install_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_Schedule_Weeks_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_Schedule_Weeks_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_AddSubContractService_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_AddSubContractService_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Administrative_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Administrative_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_Materials_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_ECI_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_ECI_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_ECI_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_ECI_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonCost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_ComisonCost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonHour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_ComisonHour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Install_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Install_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Rate_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Rate_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_SH_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_SH_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Rate_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_Rate_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Miscellaneous_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Miscellaneous_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Permits_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Permits_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallCost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_InstallCost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallHour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_InstallHour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_Rate_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_Rate_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_SI_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalMob_SI_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Per_Diem_Range_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_Link_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_TravelCost_Per_Diem_Range_Link_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Current_Rate_Superintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Current_Rate_Superintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_New_Rate_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_New_Rate_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_New_Rate_Superintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_New_Rate_Superintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_SI_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjust_SI_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Percent_Adjustment_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Percent_Adjustment_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
          Public Function Formula_Elec_Install_UnionRate_Total_Cost_Adjustment_CustomCheckDependnacy() as Boolean
          Try
          Return True
          Catch ex As Exception
          ObjectManager.LogError("Application: " + Me.Application + " CAE_Conveyor_Costing_Elec.Formula_Elec_Install_UnionRate_Total_Cost_Adjustment_CustomCheckDependnacy", ex.Message)
          End Try
          End Function
        
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_ConvElev_Footage_Hours_Added_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Average_Crew_Size_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Average_Hrs_per_Wk_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Head_Count_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Head_Count_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Head_CountSuperintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Cost_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Cost_Superintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Count_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Count_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_CountSuperintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_install_Crew_Mobilization_CostPerPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Peak_Crew_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Total_Head_Count_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Total_Mobile_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_Fork_Truck_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_Fork_Truck_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Factors_Customer_SpecDifficulty_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Factors_Material_Escalation_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Factors_Risk_Rating_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Total_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Wages_Count_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_Total_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Current_Rate_Superintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_New_Rate_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_New_Rate_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_New_Rate_Superintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_SI_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjustment_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Total_Cost_Adjustment_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_DeviceMatCost_Total_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_DeviceMatCost_Wire_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Total_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Wire_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Hours_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Conduit_Cost_Foot_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Devices_Crew_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Devices_Foot_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_IGS_Support_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Install_Hours_Device_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Materials_Cost_Device_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Rental_Cost_Week_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Rigid_Conduit_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Conduit_Footage_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Cost_Device_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Devices_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Footage_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Hours_Device_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Stagnant_Hours_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Wire_Footage_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Travel_Expense_Resource_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Wire_Cost_Foot_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Elevation_Adder_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Layout_Inventory_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_1_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_2_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Shuttle_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_System_Efficiency_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Total_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Customer_SpecAdder_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Elevation_Adder_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Layout_Inventory_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_1_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_2_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Shuttle_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_System_Efficiency_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Total_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Customer_Spec_Adder_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Elevation_Adder_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Layout_Inventory_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Misc_Item_1_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Misc_Item_2_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Shuttle_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_System_Efficiency_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Total_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Duration_Wks_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Hrs_Per_Week_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Onsite_Admin_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Permit_Hours_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Qty_Gang_Boxes_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Qty_Trucks_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Comm_Installers_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Comm_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Comm_Superintndnt_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Install_Installers_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Install_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Install_Superintndnt_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Working_Installers_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Working_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Working_Superintndnt_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Customer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Description_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Location_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Number_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Quote_Date_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Tier_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Commissioning_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_End_Commission_Testing_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_End_Elec_Install_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Install_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Start_Elec_Install_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Weeks_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_AddSubContractService_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Administrative_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_ECI_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_ECI_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonCost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonHour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Rate_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Rate_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Miscellaneous_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Permits_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallCost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallHour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_Rate_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_SI_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_Link_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Current_Rate_Superintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_New_Rate_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_New_Rate_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_New_Rate_Superintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_SI_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjustment_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Total_Cost_Adjustment_HIDE_CALCULATED_VALUE() as Boolean
      Return False
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_above_8Feet_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_ConvElev_Footage_Conveyor_Btw_5_8Feet_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_ConvElev_Footage_Hours_Added_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Average_Crew_Size_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Average_Hrs_per_Wk_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Comm_Sppt_Hrs_per_Wk_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Head_Count_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Head_Count_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Head_CountSuperintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Cost_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Cost_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Cost_Superintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Count_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_Count_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Mobile_CountSuperintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_install_Crew_Mobilization_CostPerPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Peak_Crew_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Peak_CrewMultiplierInstall_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Total_Head_Count_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Crew_Total_Mobile_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_Fork_Truck_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_LargeBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_LargeScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_SmallBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_SmallScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Qnty_SmallTeleHandle_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_Fork_Truck_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_LargeScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_TotalCost_SmallTeleHandle_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_Fork_Truck_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_LargeBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_LargeScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_SmallBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_SmallScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_Weeks_SmallTeleHandle_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_Fork_Truck_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_LargeScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallBoomLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallScissorsLift_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_EquipRent_WklyRate_SmallTeleHandle_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Factors_Customer_SpecDifficulty_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Factors_Material_Escalation_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Factors_Risk_Rating_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Count_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_Price_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Per_Diem_Rate_PriceTot_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Total_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Wages_Count_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_HSE_Cost_Wages_Price_Total_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Current_Rate_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Current_Rate_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Current_Rate_Superintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_New_Rate_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_New_Rate_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_New_Rate_Superintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjust_SI_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Percent_Adjustment_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Tot_Cost_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Tot_Cost_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Tot_Cost_Superintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_LaborRate_Total_Cost_Adjustment_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_DeviceMatCost_Conduit_Wireway_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_DeviceMatCost_Total_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_DeviceMatCost_Wire_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Conduit_Wireway_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Total_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MAT_PowerFeedMatCost_Wire_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Commissioning_Total_Hours_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Conduit_Cost_Foot_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Devices_Crew_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Devices_Foot_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_IGS_Support_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Install_Hours_Device_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Materials_Cost_Device_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Percent_Footage_at_Elevation_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Rental_Cost_Week_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Rigid_Conduit_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Conduit_Footage_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Cost_Device_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Devices_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Footage_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Hours_Device_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Stagnant_Hours_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Total_Wire_Footage_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Travel_Expense_Resource_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Metrics_Wire_Cost_Foot_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Customer_Spec_Adder_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Elevation_Adder_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Layout_Inventory_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_1_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Misc_Item_2_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Shuttle_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_System_Efficiency_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Hours_Total_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Customer_SpecAdder_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Elevation_Adder_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Layout_Inventory_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_1_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Misc_Item_2_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Shuttle_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_System_Efficiency_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Percent_Total_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Customer_Spec_Adder_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Elevation_Adder_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Layout_Inventory_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Misc_Item_1_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Misc_Item_2_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Shuttle_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_System_Efficiency_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_MISC_Price_Total_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Duration_Wks_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Hrs_Per_Week_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Onsite_Admin_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Permit_Hours_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Qty_Gang_Boxes_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_OtherCost_Qty_Trucks_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Comm_Installers_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Comm_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Comm_Superintndnt_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Install_Installers_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Install_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Install_Superintndnt_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Working_Installers_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Working_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_PeopleNeed_Working_Superintndnt_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Customer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Description_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Location_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Number_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Info_Quote_Date_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Project_Tier_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Commissioning_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_End_Commission_Testing_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_End_Elec_Install_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Install_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Start_Elec_Install_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_Schedule_Weeks_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_AddSubContractService_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Administrative_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Device_MAT_Conduit_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Device_Materials_Wire_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_ECI_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_ECI_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Equipment_Rental_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonCost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_ComisonHour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Demo_Panel_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Install_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_MiscInstall_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_PF_Labor_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Rate_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_SH_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Installer_Working_SLD_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonCost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_ComisonHour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallCost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_InstallHour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_Rate_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Lead_Person_SH_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Miscellaneous_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Permits_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Conduit_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_PF_Materials_Wire_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonCost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_ComisonHour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallCost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_InstallHour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_Rate_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Superintendent_SH_Hour_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_Mobile_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TotalCosts_Travel_Expense_PerDiemCost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_PerDiem_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_PerDiemSuperintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_Total_Mob_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_Total_Per_Diem_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_Total_Travel_Cost_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalDiem_SI_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalMob_SI_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_Lead_Man_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Crew_TotalTravel_SI_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_TravelCost_Per_Diem_Range_Link_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Current_Rate_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Current_Rate_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Current_Rate_Superintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_New_Rate_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_New_Rate_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_New_Rate_Superintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjust_SI_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Percent_Adjustment_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Tot_Cost_IG_Installer_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Tot_Cost_LeadPerson_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Tot_Cost_Superintendent_USERCHANGE() as Boolean
      Return True
      End Function
    
      '*****************************************************************************
      '   Copyright (C) 2024 Siemens. All rights reserved.
      '
      '   Changes to this procedure may only be made within formula comment blocks.
      '*****************************************************************************
      Public Function Formula_Elec_Install_UnionRate_Total_Cost_Adjustment_USERCHANGE() as Boolean
      Return True
      End Function
    

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Public Function GetRecordsetSQL(ByVal lngDBConID as Long) as String Implements RuleStream.IRsPartFormulas.GetRecordsetSQL
    Dim strSelectStmt As String = ""
    Return strSelectStmt
    End Function
    #End Region

    #Region "Event Handling "
    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Public Overrides Sub AddRsEventHandlerMappings()
    
    End Sub

    '*****************************************************************************
    '   Copyright (C) 2024 Siemens. All rights reserved.
    '
    '   Do not modify this procedure. Changes may render this application
    '   inoperable and will not be supported by Siemens Product Lifecycle Management Software Inc.
    '*****************************************************************************
    Public Overrides Sub RemoveRsEventHandlerMappings()
    
    End Sub
    #End Region

    End Class

  